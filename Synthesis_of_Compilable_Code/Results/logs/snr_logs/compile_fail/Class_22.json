{
    "file": "/home/azmain/snr_fixed/Class_22.java",
    "java_code": "/*\nDate: 1/19/17\nURL: http://stackoverflow.com/questions/4637215/can-a-progress-bar-be-used-in-a-class-outside-main\n*/\npackage common_JDK;\n\nimport java.util.List;\nimport java.awt.EventQueue;\nimport javax.swing.JLabel;\nimport java.text.DecimalFormat;\nimport javax.swing.JProgressBar;\nimport java.awt.Container;\nimport java.beans.PropertyChangeListener;\nimport javax.swing.JFrame;\nimport java.beans.PropertyChangeEvent;\nimport javax.swing.SwingWorker;\n\npublic class Class_22 {\n\t/** @see http://stackoverflow.com/questions/4637215 */\n\tpublic class TwoRoot extends JFrame {\n\n\t\tprivate static final String s = \"0.000000000000000\";\n\t\tprivate JProgressBar progressBar = new JProgressBar(0, 100);\n\t\tprivate JLabel label = new JLabel(s, JLabel.CENTER);\n\n\t\tpublic TwoRoot() {\n\t\t\tthis.setLayout(new GridLayout(0, 1));\n\t\t\tthis.setTitle(\"???2\");\n\t\t\tthis.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\t\tthis.add(progressBar);\n\t\t\tthis.add(label);\n\t\t\tthis.setSize(161, 100);\n\t\t\tthis.setLocationRelativeTo(null);\n\t\t\tthis.setVisible(true);\n\t\t}\n\n\t\tpublic void runCalc() {\n\t\t\tprogressBar.setIndeterminate(true);\n\t\t\tTwoWorker task = new TwoWorker();\n\t\t\ttask.addPropertyChangeListener(new PropertyChangeListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void propertyChange(PropertyChangeEvent e) {\n\t\t\t\t\tif (\"progress\".equals(e.getPropertyName())) {\n\t\t\t\t\t\tprogressBar.setIndeterminate(false);\n\t\t\t\t\t\tprogressBar.setValue((Integer) e.getNewValue());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\ttask.execute();\n\t\t}\n\n\t\tprivate class TwoWorker extends SwingWorker<Double, Double> {\n\n\t\t\tprivate static final int N = 5;\n\t\t\tprivate final DecimalFormat df = new DecimalFormat(s);\n\t\t\tdouble x = 1;\n\n\t\t\t@Override\n\t\t\tprotected Double doInBackground() throws Exception {\n\t\t\t\tfor (int i = 1; i <= N; i++) {\n\t\t\t\t\tx = x - (((x * x - 2) / (2 * x)));\n\t\t\t\t\tsetProgress(i * (100 / N));\n\t\t\t\t\tpublish(Double.valueOf(x));\n\t\t\t\t\tThread.sleep(1000); // simulate latency\n\t\t\t\t}\n\t\t\t\treturn Double.valueOf(x);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void process(List<Double> chunks) {\n\t\t\t\tfor (double d : chunks) {\n\t\t\t\t\tlabel.setText(df.format(d));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic void main(String[] args) {\n\t\t\tEventQueue.invokeLater(new Runnable() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tTwoRoot t = new TwoRoot();\n\t\t\t\t\tt.runCalc();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tJFrame progressFrame;\n\tJProgressBar progressBar;\n\tJLabel label = new JLabel(\"Calculating...\");;\n\tContainer pane;\n\n\tdouble amountSaved = 0;\n\tint i = 0;\n\tint iterations;\n\n\tpublic void createGui(int iterations) {\n\t\t//Create all components\n\t\tprogressFrame = new JFrame(\"Calculation Progress\");\n\t\tprogressFrame.setSize(300, 100);\n\t\tpane = progressFrame.getContentPane();\n\t\tpane.setLayout(null);\n\t\tlabel = new JLabel(\"Calculating...\");\n\t\tlabel.setBounds(115, 35, 200, 25);\n\t\tprogressBar = new JProgressBar(0, iterations);\n\t\tprogressBar.setBounds(10, 10, 280, 20);\n\t\tprogressBar.setStringPainted(true);\n\t\t//Add components to pane\n\t\tpane.add(progressBar);\n\t\tpane.add(label);\n\t\t//Make frame visible\n\t\tprogressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\tprogressFrame.setResizable(false); //No resize\n\t\tprogressFrame.setLocationRelativeTo(null);\n\t\tprogressFrame.setVisible(true);\n\t}\n\n\tpublic void runCalcs(double MP, double StepAmt, double L1, double L2, double C1, double C2, double IM1, double IM2,\n\t\t\tdouble M1Start, double M2Start) {\n\n\t\tprogressBar.setIndeterminate(false);\n\t\tTwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);\n\t\ttask.addPropertyChangeListener(new PropertyChangeListener() {\n\n\t\t\t@Override\n\t\t\tpublic void propertyChange(PropertyChangeEvent e) {\n\t\t\t\tif (\"progress\".equals(e.getPropertyName())) {\n\t\t\t\t\tprogressBar.setIndeterminate(false);\n\t\t\t\t\tprogressBar.setValue((Integer) e.getNewValue());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\ttask.execute();\n\t} //end method runCalcs\n\n\tpublic class TwoWorker extends SwingWorker<Double, Double> {\n\n\t\tprivate final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;\n\n\t\tpublic TwoWorker(double MPa, double StepAmta, double L1a, double L2a, double C1a, double C2a, double IM1a,\n\t\t\t\tdouble IM2a, double M1Starta, double M2Starta) {\n\n\t\t\tMP = MPa;\n\t\t\tStepAmt = StepAmta;\n\t\t\tL1 = L1a;\n\t\t\tL2 = L2a;\n\t\t\tC1 = C1a;\n\t\t\tC2 = C2a;\n\t\t\tIM1 = IM1a;\n\t\t\tIM2 = IM2a;\n\t\t\tM1Start = M1Starta;\n\t\t\tM2Start = M2Starta;\n\t\t}\n\n\t\t@Override\n\t\tprotected Double doInBackground() {\n\n\t\t\tdouble M1 = M1Start;\n\t\t\tdouble M2 = M2Start;\n\n\t\t\t// Set MinLoop as maximum to start\n\t\t\t// Loan 1\n\t\t\tdouble N1 = (Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);\n\t\t\tdouble M1Sum = M1 * N1;\n\t\t\t// Loan 2\n\t\t\tdouble N2 = (Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);\n\t\t\tdouble M2Sum = M2 * N2;\n\t\t\tdouble minLoop = M1Sum + M2Sum;\n\t\t\tdouble MTotal = 0;\n\n\t\t\t// Define variables for mins\n\t\t\tdouble MP1 = 0;\n\t\t\tdouble MP2 = 0;\n\t\t\tdouble NP1 = 0;\n\t\t\tdouble NP2 = 0;\n\t\t\tdouble MP1Sum = 0;\n\t\t\tdouble MP2Sum = 0;\n\n\t\t\twhile (M1 <= MP - M2Start && M2 >= M2Start) {\n\t\t\t\tN1 = (Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);\n\t\t\t\tM1Sum = N1 * M1;\n\t\t\t\tN2 = (Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);\n\t\t\t\tM2Sum = N2 * M2;\n\t\t\t\tMTotal = M1Sum + M2Sum;\n\t\t\t\tif (MTotal < minLoop) {\n\t\t\t\t\tminLoop = MTotal;\n\t\t\t\t\tMP1 = M1;\n\t\t\t\t\tMP2 = M2;\n\t\t\t\t\tNP1 = N1;\n\t\t\t\t\tNP2 = N2;\n\t\t\t\t\tMP1Sum = M1Sum;\n\t\t\t\t\tMP2Sum = M2Sum;\n\t\t\t\t} // end if\n\t\t\t\ti++;\n\t\t\t\tprogressBar.setValue(i);\n\t\t\t\tM1 = M1 + StepAmt;\n\t\t\t\tM2 = MP - M1;\n\t\t\t\t// Reset monthly sums\n\t\t\t\tM1Sum = 0;\n\t\t\t\tM2Sum = 0;\n\t\t\t} // end while\n\n\t\t\tSystem.out.printf(\"MP1 = %.2f\\n\", MP1);\n\t\t\tSystem.out.printf(\"MP2 = %.2f\\n\", MP2);\n\t\t\tSystem.out.printf(\"NP1 = %.2f\\n\", NP1);\n\t\t\tSystem.out.printf(\"NP2 = %.2f\\n\", NP2);\n\t\t\tSystem.out.printf(\"MP1Sum = %.2f\\n\", MP1Sum);\n\t\t\tSystem.out.printf(\"MP2Sum = %.2f\\n\", MP2Sum);\n\t\t\tSystem.out.printf(\"MTotal = %.2f\\n\", minLoop);\n\t\t\tSystem.out.printf(\"i = %d\\n\", i);\n\t\t\tSystem.out.printf(\"M1Start = %.2f\\n\", M1Start);\n\t\t\tSystem.out.printf(\"M2Start = %.2f\\n\", M2Start);\n\t\t\tSystem.out.printf(\"MP= %.2f\\n\", MP);\n\n\t\t\t// if there's a value for current payments, calculate amount saved\n\t\t\tif (C1 > 0) {\n\t\t\t\tdouble CN1 = (Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);\n\t\t\t\tdouble CT1 = CN1 * C1;\n\n\t\t\t\tdouble CN2 = (Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);\n\t\t\t\tdouble CT2 = CN2 * C2;\n\n\t\t\t\tdouble CTotal = CT1 + CT2;\n\t\t\t\tamountSaved = CTotal - minLoop;\n\t\t\t} // end if\n\n\t\t\treturn null;\n\n\t\t} // end doInBackGround\n\n\t\t@Override\n\t\tprotected void done() {\n\t\t\tlabel.setBounds(133, 35, 200, 25);\n\t\t\tlabel.setText(\"Done!\");\n\t\t}\n\t} // end TwoWorker\n\n\tpublic double savedReturn() {\n\t\treturn amountSaved;\n\t}\n}",
    "stdout": "",
    "stderr": "/home/azmain/snr_fixed/Class_22.java:27: error: cannot find symbol\n\t\t\tthis.setLayout(new GridLayout(0, 1));\n\t\t\t                   ^\n  symbol:   class GridLayout\n  location: class Class_22.TwoRoot\n1 error\n",
    "return_code": 1
}