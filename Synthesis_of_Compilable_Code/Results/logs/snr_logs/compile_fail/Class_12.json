{
    "file": "/home/azmain/snr_fixed/Class_12.java",
    "java_code": "/*\nDate: 1/19/17\nURL: http://stackoverflow.com/questions/2201925/converting-iso-8601-compliant-string-to-java-util-date\n*/\npackage common_JDK;\n\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport com.google.gwt.core.ext.typeinfo.ParseException;\nimport java.util.Date;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\n\n/**\n * Helper class for handling a most common subset of ISO 8601 strings\n * (in the following format: \"2008-03-01T13:00:00+01:00\"). It supports\n * parsing the \"Z\" timezone, but many other less-used features are\n * missing.\n */\npublic final class Class_12 {\n\t/** Transform Calendar to ISO 8601 string. */\n\tpublic static String fromCalendar(final Calendar calendar) {\n\t\tDate date = calendar.getTime();\n\t\tString formatted = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\").format(date);\n\t\treturn formatted.substring(0, 22) + \":\" + formatted.substring(22);\n\t}\n\n\t/** Get current date and time formatted as ISO 8601 string. */\n\tpublic static String now() {\n\t\treturn fromCalendar(GregorianCalendar.getInstance());\n\t}\n\n\t/** Transform ISO 8601 string to Calendar. */\n\tpublic static Calendar toCalendar(final String iso8601string) throws ParseException {\n\t\tCalendar calendar = GregorianCalendar.getInstance();\n\t\tString s = iso8601string.replace(\"Z\", \"+00:00\");\n\t\ttry {\n\t\t\ts = s.substring(0, 22) + s.substring(23); // to get rid of the \":\"\n\t\t} catch (IndexOutOfBoundsException e) {\n\t\t\tthrow new ParseException(\"Invalid length\", 0);\n\t\t}\n\t\tDate date = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\").parse(s);\n\t\tcalendar.setTime(date);\n\t\treturn calendar;\n\t}\n\n\tpublic class ISO8601DateFormatter {\n\n\t\tprivate final DateFormat DATE_FORMAT_1 = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n\t\tprivate final DateFormat DATE_FORMAT_2 = new SimpleDateFormat(\"yyyy-MM-dd'T'HHmmssZ\");\n\t\tprivate static final String UTC_PLUS = \"+\";\n\t\tprivate static final String UTC_MINUS = \"-\";\n\n\t\tpublic Date toDate(String iso8601string) throws ParseException {\n\t\t\tiso8601string = iso8601string.trim();\n\t\t\tif (iso8601string.toUpperCase().indexOf(\"Z\") > 0) {\n\t\t\t\tiso8601string = iso8601string.toUpperCase().replace(\"Z\", \"+0000\");\n\t\t\t} else if (((iso8601string.indexOf(UTC_PLUS)) > 0)) {\n\t\t\t\tiso8601string = replaceColon(iso8601string, iso8601string.indexOf(UTC_PLUS));\n\t\t\t\tiso8601string = appendZeros(iso8601string, iso8601string.indexOf(UTC_PLUS), UTC_PLUS);\n\t\t\t} else if (((iso8601string.indexOf(UTC_MINUS)) > 0)) {\n\t\t\t\tiso8601string = replaceColon(iso8601string, iso8601string.indexOf(UTC_MINUS));\n\t\t\t\tiso8601string = appendZeros(iso8601string, iso8601string.indexOf(UTC_MINUS), UTC_MINUS);\n\t\t\t}\n\n\t\t\tDate date = null;\n\t\t\tif (iso8601string.contains(\":\"))\n\t\t\t\tdate = DATE_FORMAT_1.parse(iso8601string);\n\t\t\telse {\n\t\t\t\tdate = DATE_FORMAT_2.parse(iso8601string);\n\t\t\t}\n\t\t\treturn date;\n\t\t}\n\n\t\tpublic String toISO8601String(Date date) {\n\t\t\treturn DATE_FORMAT_1.format(date);\n\t\t}\n\n\t\tprivate String replaceColon(String sourceStr, int offsetIndex) {\n\t\t\tif (sourceStr.substring(offsetIndex).contains(\":\"))\n\t\t\t\treturn sourceStr.substring(0, offsetIndex) + sourceStr.substring(offsetIndex).replace(\":\", \"\");\n\t\t\treturn sourceStr;\n\t\t}\n\n\t\tprivate String appendZeros(String sourceStr, int offsetIndex, String offsetChar) {\n\t\t\tif ((sourceStr.length() - 1) - sourceStr.indexOf(offsetChar, offsetIndex) <= 2)\n\t\t\t\treturn sourceStr + \"00\";\n\t\t\treturn sourceStr;\n\t\t}\n\t}\n}",
    "stdout": "",
    "stderr": "/home/azmain/snr_fixed/Class_12.java:40: error: incompatible types: int cannot be converted to Throwable\n\t\t\tthrow new ParseException(\"Invalid length\", 0);\n\t\t\t                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
    "return_code": 1
}