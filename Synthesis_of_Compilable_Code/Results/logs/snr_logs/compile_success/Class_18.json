{
    "file": "/home/azmain/snr_fixed/Class_18.java",
    "java_code": "/*\nDate: 1/19/17 - Consider later\nURL: http://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful\n*/\npackage common_JDK;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\n\npublic class Class_18 {\n\tpublic static String dump(Object o, int callCount) {\n\t\tcallCount++;\n\t\tStringBuffer tabs = new StringBuffer();\n\t\tfor (int k = 0; k < callCount; k++) {\n\t\t\ttabs.append(\"\\t\");\n\t\t}\n\t\tStringBuffer buffer = new StringBuffer();\n\t\tClass oClass = o.getClass();\n\t\tif (oClass.isArray()) {\n\t\t\tbuffer.append(\"\\n\");\n\t\t\tbuffer.append(tabs.toString());\n\t\t\tbuffer.append(\"[\");\n\t\t\tfor (int i = 0; i < Array.getLength(o); i++) {\n\t\t\t\tif (i < 0)\n\t\t\t\t\tbuffer.append(\",\");\n\t\t\t\tObject value = Array.get(o, i);\n\t\t\t\tif (value.getClass().isPrimitive() || value.getClass() == java.lang.Long.class\n\t\t\t\t\t\t|| value.getClass() == java.lang.String.class || value.getClass() == java.lang.Integer.class\n\t\t\t\t\t\t|| value.getClass() == java.lang.Boolean.class) {\n\t\t\t\t\tbuffer.append(value);\n\t\t\t\t} else {\n\t\t\t\t\tbuffer.append(dump(value, callCount));\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuffer.append(tabs.toString());\n\t\t\tbuffer.append(\"]\\n\");\n\t\t} else {\n\t\t\tbuffer.append(\"\\n\");\n\t\t\tbuffer.append(tabs.toString());\n\t\t\tbuffer.append(\"{\\n\");\n\t\t\twhile (oClass != null) {\n\t\t\t\tField[] fields = oClass.getDeclaredFields();\n\t\t\t\tfor (int i = 0; i < fields.length; i++) {\n\t\t\t\t\tbuffer.append(tabs.toString());\n\t\t\t\t\tfields[i].setAccessible(true);\n\t\t\t\t\tbuffer.append(fields[i].getName());\n\t\t\t\t\tbuffer.append(\"=\");\n\t\t\t\t\ttry {\n\t\t\t\t\t\tObject value = fields[i].get(o);\n\t\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\t\tif (value.getClass().isPrimitive() || value.getClass() == java.lang.Long.class\n\t\t\t\t\t\t\t\t\t|| value.getClass() == java.lang.String.class\n\t\t\t\t\t\t\t\t\t|| value.getClass() == java.lang.Integer.class\n\t\t\t\t\t\t\t\t\t|| value.getClass() == java.lang.Boolean.class) {\n\t\t\t\t\t\t\t\tbuffer.append(value);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbuffer.append(dump(value, callCount));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\t\t\tbuffer.append(e.getMessage());\n\t\t\t\t\t}\n\t\t\t\t\tbuffer.append(\"\\n\");\n\t\t\t\t}\n\t\t\t\toClass = oClass.getSuperclass();\n\t\t\t}\n\t\t\tbuffer.append(tabs.toString());\n\t\t\tbuffer.append(\"}\\n\");\n\t\t}\n\t\treturn buffer.toString();\n\t}\n}",
    "stdout": "",
    "stderr": "",
    "return_code": 0
}