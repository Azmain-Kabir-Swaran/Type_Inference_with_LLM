{
    "file": "/home/azmain/code_for_compilation_test/base-prompt/xstream_class_14.java",
    "java_code": "package xstream;\nimport com.thoughtworks.xstream.converters.SingleValueConverter;\n\nimport com.thoughtworks.xstream.converters.SingleValueConverter;\n\npublic class xstream_class_14 {\n    public static class SingleValueEnumConverter implements SingleValueConverter {\n        private final Class<?> enumType;\n\n        public SingleValueEnumConverter(Class<?> type) {\n            this.enumType = type;\n        }\n\n        @Override\n        public boolean canConvert(Class type) {\n            return type.equals(enumType);\n        }\n\n        @Override\n        public Object fromString(String value) {\n            return Enum.valueOf(enumType, value);\n        }\n\n        @Override\n        public String toString(Object obj) {\n            return obj.toString();\n        }\n    }\n}",
    "stdout": "",
    "stderr": "/home/azmain/code_for_compilation_test/base-prompt/xstream_class_14.java:21: error: method valueOf in class Enum<E> cannot be applied to given types;\n            return Enum.valueOf(enumType, value);\n                       ^\n  required: Class<T>,String\n  found: Class<CAP#1>,String\n  reason: inference variable T has incompatible bounds\n    equality constraints: CAP#1\n    upper bounds: Enum<T>\n  where T,E are type-variables:\n    T extends Enum<T> declared in method <T>valueOf(Class<T>,String)\n    E extends Enum<E> declared in class Enum\n  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture of ?\n1 error\n",
    "return_code": 1
}