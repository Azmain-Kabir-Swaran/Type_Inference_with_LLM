{
    "file": "/home/azmain/GitHub Codes/so_dataset/JodaTime45.java",
    "java_code": "package jodatime;\n\npublic class JodaTime45 {\n\n\tpublic class FastDateTimeZoneProvider implements Provider {\n\t    public final Set<String> AVAILABLE_IDS = new HashSet<String>();\n\n\n\t    \n\n\t    public DateTimeZone getZone(String id) {\n\t        if (id == null) {\n\t            return DateTimeZone.UTC;\n\t        }\n\n\t        TimeZone tz = TimeZone.getTimeZone(id);\n\t        if (tz == null) {\n\t            return DateTimeZone.UTC;\n\t        }\n\n\t        int rawOffset = tz.getRawOffset();\n\n\t            //sub-optimal. could be improved to only create a new Date every few minutes\n\t        if (tz.inDaylightTime(new Date())) {\n\t            rawOffset += tz.getDSTSavings();\n\t        }\n\n\t        return DateTimeZone.forOffsetMillis(rawOffset);\n\t    }\n\n\t    public Set getAvailableIDs() {\n\t        return AVAILABLE_IDS;\n\t    }\n\t}\n}\n",
    "stdout": "",
    "stderr": "/home/azmain/GitHub Codes/so_dataset/JodaTime45.java:5: error: cannot find symbol\n\tpublic class FastDateTimeZoneProvider implements Provider {\n\t                                                 ^\n  symbol:   class Provider\n  location: class JodaTime45\n/home/azmain/GitHub Codes/so_dataset/JodaTime45.java:6: error: cannot find symbol\n\t    public final Set<String> AVAILABLE_IDS = new HashSet<String>();\n\t                 ^\n  symbol:   class Set\n  location: class JodaTime45.FastDateTimeZoneProvider\n/home/azmain/GitHub Codes/so_dataset/JodaTime45.java:11: error: cannot find symbol\n\t    public DateTimeZone getZone(String id) {\n\t           ^\n  symbol:   class DateTimeZone\n  location: class JodaTime45.FastDateTimeZoneProvider\n/home/azmain/GitHub Codes/so_dataset/JodaTime45.java:31: error: cannot find symbol\n\t    public Set getAvailableIDs() {\n\t           ^\n  symbol:   class Set\n  location: class JodaTime45.FastDateTimeZoneProvider\n/home/azmain/GitHub Codes/so_dataset/JodaTime45.java:6: error: cannot find symbol\n\t    public final Set<String> AVAILABLE_IDS = new HashSet<String>();\n\t                                                 ^\n  symbol:   class HashSet\n  location: class JodaTime45.FastDateTimeZoneProvider\n/home/azmain/GitHub Codes/so_dataset/JodaTime45.java:13: error: cannot find symbol\n\t            return DateTimeZone.UTC;\n\t                   ^\n  symbol:   variable DateTimeZone\n  location: class JodaTime45.FastDateTimeZoneProvider\n/home/azmain/GitHub Codes/so_dataset/JodaTime45.java:16: error: cannot find symbol\n\t        TimeZone tz = TimeZone.getTimeZone(id);\n\t        ^\n  symbol:   class TimeZone\n  location: class JodaTime45.FastDateTimeZoneProvider\n/home/azmain/GitHub Codes/so_dataset/JodaTime45.java:16: error: cannot find symbol\n\t        TimeZone tz = TimeZone.getTimeZone(id);\n\t                      ^\n  symbol:   variable TimeZone\n  location: class JodaTime45.FastDateTimeZoneProvider\n/home/azmain/GitHub Codes/so_dataset/JodaTime45.java:18: error: cannot find symbol\n\t            return DateTimeZone.UTC;\n\t                   ^\n  symbol:   variable DateTimeZone\n  location: class JodaTime45.FastDateTimeZoneProvider\n/home/azmain/GitHub Codes/so_dataset/JodaTime45.java:24: error: cannot find symbol\n\t        if (tz.inDaylightTime(new Date())) {\n\t                                  ^\n  symbol:   class Date\n  location: class JodaTime45.FastDateTimeZoneProvider\n/home/azmain/GitHub Codes/so_dataset/JodaTime45.java:28: error: cannot find symbol\n\t        return DateTimeZone.forOffsetMillis(rawOffset);\n\t               ^\n  symbol:   variable DateTimeZone\n  location: class JodaTime45.FastDateTimeZoneProvider\n11 errors\n",
    "return_code": 1
}