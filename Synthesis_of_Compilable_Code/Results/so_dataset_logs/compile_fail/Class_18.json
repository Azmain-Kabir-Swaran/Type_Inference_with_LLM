{
    "file": "/home/azmain/GitHub Codes/so_dataset/Class_18.java",
    "java_code": "package common_JDK;\npublic class Class_18{\n\tpublic static String dump(Object o, int callCount) {\n\t    callCount++;\n\t    StringBuffer tabs = new StringBuffer();\n\t    for (int k = 0; k < callCount; k++) {\n\t        tabs.append(\"\\t\");\n\t    }\n\t    StringBuffer buffer = new StringBuffer();\n\t    Class oClass = o.getClass();\n\t    if (oClass.isArray()) {\n\t        buffer.append(\"\\n\");\n\t        buffer.append(tabs.toString());\n\t        buffer.append(\"[\");\n\t        for (int i = 0; i < Array.getLength(o); i++) {\n\t            if (i < 0)\n\t                buffer.append(\",\");\n\t            Object value = Array.get(o, i);\n\t            if (value.getClass().isPrimitive() ||\n\t                    value.getClass() == java.lang.Long.class ||\n\t                    value.getClass() == java.lang.String.class ||\n\t                    value.getClass() == java.lang.Integer.class ||\n\t                    value.getClass() == java.lang.Boolean.class\n\t                    ) {\n\t                buffer.append(value);\n\t            } else {\n\t                buffer.append(dump(value, callCount));\n\t            }\n\t        }\n\t        buffer.append(tabs.toString());\n\t        buffer.append(\"]\\n\");\n\t    } else {\n\t        buffer.append(\"\\n\");\n\t        buffer.append(tabs.toString());\n\t        buffer.append(\"{\\n\");\n\t        while (oClass != null) {\n\t            Field[] fields = oClass.getDeclaredFields();\n\t            for (int i = 0; i < fields.length; i++) {\n\t                buffer.append(tabs.toString());\n\t                fields[i].setAccessible(true);\n\t                buffer.append(fields[i].getName());\n\t                buffer.append(\"=\");\n\t                try {\n\t                    Object value = fields[i].get(o);\n\t                    if (value != null) {\n\t                        if (value.getClass().isPrimitive() ||\n\t                                value.getClass() == java.lang.Long.class ||\n\t                                value.getClass() == java.lang.String.class ||\n\t                                value.getClass() == java.lang.Integer.class ||\n\t                                value.getClass() == java.lang.Boolean.class\n\t                                ) {\n\t                            buffer.append(value);\n\t                        } else {\n\t                            buffer.append(dump(value, callCount));\n\t                        }\n\t                    }\n\t                } catch (IllegalAccessException e) {\n\t                    buffer.append(e.getMessage());\n\t                }\n\t                buffer.append(\"\\n\");\n\t            }\n\t            oClass = oClass.getSuperclass();\n\t        }\n\t        buffer.append(tabs.toString());\n\t        buffer.append(\"}\\n\");\n\t    }\n\t    return buffer.toString();\n\t}\n}",
    "stdout": "",
    "stderr": "/home/azmain/GitHub Codes/so_dataset/Class_18.java:15: error: cannot find symbol\n\t        for (int i = 0; i < Array.getLength(o); i++) {\n\t                            ^\n  symbol:   variable Array\n  location: class Class_18\n/home/azmain/GitHub Codes/so_dataset/Class_18.java:18: error: cannot find symbol\n\t            Object value = Array.get(o, i);\n\t                           ^\n  symbol:   variable Array\n  location: class Class_18\n/home/azmain/GitHub Codes/so_dataset/Class_18.java:37: error: cannot find symbol\n\t            Field[] fields = oClass.getDeclaredFields();\n\t            ^\n  symbol:   class Field\n  location: class Class_18\n3 errors\n",
    "return_code": 1
}