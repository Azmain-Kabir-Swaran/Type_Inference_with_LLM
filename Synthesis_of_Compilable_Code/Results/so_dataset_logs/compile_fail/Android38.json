{
    "file": "/home/azmain/GitHub Codes/so_dataset/Android38.java",
    "java_code": "package androidExamples;\npublic class Android38\n{\n    static String serviceDomain = \"http://staging.abaqus.net\";\n    static String postUrl = serviceDomain + \"/geo/upl/wupload/pictures\";\n    static String CRLF = \"\\r\\n\"; \n    static String twoHyphens = \"--\"; \n    static String boundary = \"*****mgd*****\"; \n\n    private String name = null;\n    private String password = null;\n    private DataOutputStream dataStream = null;\n\n    enum ReturnCode { noPicture, unknown, http201, http400, http401, http403, http404, http500};\n\n    public Android38(String name, String password) \n    {\n        this.name = name;\n        this.password = password;\n    }\n\n    public static void setServiceDomain(String domainName)\n    {\n        serviceDomain = domainName;\n    }\n\n    public static String getServiceDomain()\n    {\n        return serviceDomain;\n    }\n\n    public ReturnCode uploadPicture(String pictureFileName)\n    {\n        File uploadFile = new File(pictureFileName); \n\n        if (uploadFile.exists())\n            try \n            { \n                FileInputStream fileInputStream = new FileInputStream(uploadFile); \n                URL connectURL = new URL(postUrl);\n                HttpURLConnection conn = (HttpURLConnection)connectURL.openConnection(); \n\n                conn.setDoInput(true); \n                conn.setDoOutput(true); \n                conn.setUseCaches(false); \n                conn.setRequestMethod(\"POST\"); \n\n                conn.setRequestProperty(\"User-Agent\", \"myGeodiary-V1\");\n                conn.setRequestProperty(\"Connection\",\"Keep-Alive\"); \n                conn.setRequestProperty(\"Content-Type\",\"multipart/form-data;boundary=\"+boundary); \n\n                conn.connect();\n\n                dataStream = new DataOutputStream(conn.getOutputStream()); \n\n                writeFormField(\"login\", name);\n                writeFormField(\"password\", password);\n                writeFileField(\"photo1\", pictureFileName, \"image/jpg\", fileInputStream);\n\n                // final closing boundary line\n                dataStream.writeBytes(twoHyphens + boundary + twoHyphens + CRLF); \n\n                fileInputStream.close(); \n                dataStream.flush(); \n                dataStream.close();\n                dataStream = null;\n\n                String response = getResponse(conn);\n                conn.getResponseCode();\n\n                if (response.contains(\"uploaded successfully\"))\n                    return ReturnCode.http201;\n                else \n                    // for now assume bad name/password\n                    return ReturnCode.http401; \n            } \n            catch (MalformedURLException mue) { \n                // Log.e(Tag, \"error: \" + mue.getMessage(), mue); \n                System.out.println(\"GeoPictureUploader.uploadPicture: Malformed URL: \" + mue.getMessage());\n                return ReturnCode.http400;\n            } \n            catch (IOException ioe) { \n                // Log.e(Tag, \"error: \" + ioe.getMessage(), ioe); \n                System.out.println(\"GeoPictureUploader.uploadPicture: IOE: \" + ioe.getMessage());\n                return ReturnCode.http500;\n            } \n            catch (Exception e) { \n                // Log.e(Tag, \"error: \" + ioe.getMessage(), ioe); \n                System.out.println(\"GeoPictureUploader.uploadPicture: unknown: \" + e.getMessage());\n                return ReturnCode.unknown;\n            } \n        else \n        {\n            return ReturnCode.noPicture;  \n        }\n    }\n\n    /**\n     * @param conn\n     * @return\n     */\n    private String getResponse(HttpURLConnection conn)\n    {\n        try \n        {\n            DataInputStream dis = new DataInputStream(conn.getInputStream()); \n            byte []        data = new byte[1024];\n            int             len = dis.read(data, 0, 1024);\n\n            dis.close();\n            conn.getResponseCode();\n\n            if (len > 0)\n                return new String(data, 0, len);\n            else\n                return \"\";\n        }\n        catch(Exception e)\n        {\n            System.out.println(\"GeoPictureUploader: biffed it getting HTTPResponse\");\n            //Log.e(TAG, \"GeoPictureUploader: biffed it getting HTTPResponse\");\n            return \"\";\n        }\n    }\n\n    /**\n     *  this mode of reading response no good either\n     */\n    private String getResponseOrig(HttpURLConnection conn)\n    {\n        InputStream is = null;\n        try \n        {\n            is = conn.getInputStream(); \n            // scoop up the reply from the server\n            int ch; \n            StringBuffer sb = new StringBuffer(); \n            while( ( ch = is.read() ) != -1 ) { \n                sb.append( (char)ch ); \n            } \n            return sb.toString();   \n        }\n        catch(Exception e)\n        {\n            System.out.println(\"GeoPictureUploader: biffed it getting HTTPResponse\");\n            //Log.e(TAG, \"GeoPictureUploader: biffed it getting HTTPResponse\");\n        }\n        finally \n        {\n            try {\n            if (is != null)\n                is.close();\n            } catch (Exception e) {}\n        }\n\n        return \"\";\n    }\n\n    /**\n     * write one form field to dataSream\n     * @param fieldName\n     * @param fieldValue\n     */\n    private void writeFormField(String fieldName, String fieldValue)\n    {\n        try\n        {\n            dataStream.writeBytes(twoHyphens + boundary + CRLF);    \n            dataStream.writeBytes(\"Content-Disposition: form-data; name=\\\"\" + fieldName + \"\\\"\" + CRLF);\n            dataStream.writeBytes(CRLF);\n            dataStream.writeBytes(fieldValue);\n            dataStream.writeBytes(CRLF);\n        }\n        catch(Exception e)\n        {\n            System.out.println(\"GeoPictureUploader.writeFormField: got: \" + e.getMessage());\n            //Log.e(TAG, \"GeoPictureUploader.writeFormField: got: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * write one file field to dataSream\n     * @param fieldName - name of file field\n     * @param fieldValue - file name\n     * @param type - mime type\n     * @param fileInputStream - stream of bytes that get sent up\n     */\n    private void writeFileField(\n        String fieldName,\n        String fieldValue,\n        String type,\n        FileInputStream fis)\n    {\n        try\n        {\n            // opening boundary line\n            dataStream.writeBytes(twoHyphens + boundary + CRLF);    \n            dataStream.writeBytes(\"Content-Disposition: form-data; name=\\\"\"\n                                  + fieldName\n                                  + \"\\\";filename=\\\"\" \n                                  + fieldValue\n                                  + \"\\\"\" \n                                  + CRLF);\n            dataStream.writeBytes(\"Content-Type: \" + type +  CRLF);\n            dataStream.writeBytes(CRLF); \n\n            // create a buffer of maximum size \n            int bytesAvailable = fis.available(); \n            int maxBufferSize = 1024; \n            int bufferSize = Math.min(bytesAvailable, maxBufferSize); \n            byte[] buffer = new byte[bufferSize]; \n            // read file and write it into form... \n            int bytesRead = fis.read(buffer, 0, bufferSize); \n            while (bytesRead > 0) \n            { \n                dataStream.write(buffer, 0, bufferSize); \n                bytesAvailable = fis.available(); \n                bufferSize = Math.min(bytesAvailable, maxBufferSize); \n                bytesRead = fis.read(buffer, 0, bufferSize); \n            } \n\n            // closing CRLF\n            dataStream.writeBytes(CRLF);\n        }\n        catch(Exception e)\n        {\n            System.out.println(\"GeoPictureUploader.writeFormField: got: \" + e.getMessage());\n            //Log.e(TAG, \"GeoPictureUploader.writeFormField: got: \" + e.getMessage());\n        }\n    }\n\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args)\n    {\n        if (args.length >= 0)\n        {\n            Android38 gpu = new Android38(\"john\", \"notmyrealpassword\");\n            String picName = args[0];\n\n            gpu.uploadPicture(picName);\n            System.out.printf(\"done\");\n        }\n    }\n\n}",
    "stdout": "",
    "stderr": "/home/azmain/GitHub Codes/so_dataset/Android38.java:12: error: cannot find symbol\n    private DataOutputStream dataStream = null;\n            ^\n  symbol:   class DataOutputStream\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:102: error: cannot find symbol\n    private String getResponse(HttpURLConnection conn)\n                               ^\n  symbol:   class HttpURLConnection\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:129: error: cannot find symbol\n    private String getResponseOrig(HttpURLConnection conn)\n                                   ^\n  symbol:   class HttpURLConnection\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:192: error: cannot find symbol\n        FileInputStream fis)\n        ^\n  symbol:   class FileInputStream\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:34: error: cannot find symbol\n        File uploadFile = new File(pictureFileName); \n        ^\n  symbol:   class File\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:34: error: cannot find symbol\n        File uploadFile = new File(pictureFileName); \n                              ^\n  symbol:   class File\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:39: error: cannot find symbol\n                FileInputStream fileInputStream = new FileInputStream(uploadFile); \n                ^\n  symbol:   class FileInputStream\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:39: error: cannot find symbol\n                FileInputStream fileInputStream = new FileInputStream(uploadFile); \n                                                      ^\n  symbol:   class FileInputStream\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:40: error: cannot find symbol\n                URL connectURL = new URL(postUrl);\n                ^\n  symbol:   class URL\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:40: error: cannot find symbol\n                URL connectURL = new URL(postUrl);\n                                     ^\n  symbol:   class URL\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:41: error: cannot find symbol\n                HttpURLConnection conn = (HttpURLConnection)connectURL.openConnection(); \n                ^\n  symbol:   class HttpURLConnection\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:41: error: cannot find symbol\n                HttpURLConnection conn = (HttpURLConnection)connectURL.openConnection(); \n                                          ^\n  symbol:   class HttpURLConnection\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:54: error: cannot find symbol\n                dataStream = new DataOutputStream(conn.getOutputStream()); \n                                 ^\n  symbol:   class DataOutputStream\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:77: error: cannot find symbol\n            catch (MalformedURLException mue) { \n                   ^\n  symbol:   class MalformedURLException\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:82: error: cannot find symbol\n            catch (IOException ioe) { \n                   ^\n  symbol:   class IOException\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:106: error: cannot find symbol\n            DataInputStream dis = new DataInputStream(conn.getInputStream()); \n            ^\n  symbol:   class DataInputStream\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:106: error: cannot find symbol\n            DataInputStream dis = new DataInputStream(conn.getInputStream()); \n                                      ^\n  symbol:   class DataInputStream\n  location: class Android38\n/home/azmain/GitHub Codes/so_dataset/Android38.java:131: error: cannot find symbol\n        InputStream is = null;\n        ^\n  symbol:   class InputStream\n  location: class Android38\n18 errors\n",
    "return_code": 1
}