{
    "attempt": 5,
    "file": "/home/azmain/GitHub Codes/Type_Inference_with_LLM/Java_Type_Inference/Results/llm_fixes/fixed_codes/so-fix/hibernate_class_27.java",
    "java_code": "import java.util.List;\n\nimport org.hibernate.Session;\nimport org.hibernate.query.Query;\nimport org.hibernate.HibernateException;\nimport org.hibernate.cfg.Configuration;\nimport org.hibernate.SessionFactory;\n\npublic class hibernate_class_27 {\n    private static final SessionFactory sessionFactory = buildSessionFactory();\n\n    private static SessionFactory buildSessionFactory() {\n        try {\n            return new Configuration().configure().buildSessionFactory();\n        } catch (HibernateException ex) {\n            System.err.println(\"Initial SessionFactory creation failed: \" + ex);\n            throw new ExceptionInInitializerError(ex);\n        }\n    }\n\n    public static List<ProjectAssignment> getAllResources() {\n        List<ProjectAssignment> projectMasters;\n\n        try (Session session = sessionFactory.openSession()) {\n            Query<ProjectAssignment> query = session.createQuery(\"select distinct new hibernate_class_27.ProjectAssignment(aid, pid, userName) from ProjectAssignment\", ProjectAssignment.class);\n            projectMasters = query.getResultList();\n        }\n\n        return projectMasters;\n    }\n\n    public static class ProjectAssignment implements java.io.Serializable {\n        private short aid;\n        private String pid;\n        private String userName;\n\n        public ProjectAssignment() {\n        }\n\n        public ProjectAssignment(short aid) {\n            this.aid = aid;\n        }\n\n        public ProjectAssignment(short aid, String pid, String userName) {\n            this.aid = aid;\n            this.pid = pid;\n            this.userName = userName;\n        }\n\n        public short getAid() {\n            return this.aid;\n        }\n\n        public void setAid(short aid) {\n            this.aid = aid;\n        }\n\n        public String getPid() {\n            return this.pid;\n        }\n\n        public void setPid(String pid) {\n            this.pid = pid;\n        }\n\n        public String getUserName() {\n            return this.userName;\n        }\n\n        public void setUserName(String userName) {\n            this.userName = userName;\n        }\n    }\n}",
    "stdout": "",
    "stderr": "/home/azmain/GitHub Codes/Type_Inference_with_LLM/Java_Type_Inference/Results/llm_fixes/fixed_codes/so-fix/hibernate_class_27.java:4: error: package org.hibernate.query does not exist\nimport org.hibernate.query.Query;\n                          ^\n/home/azmain/GitHub Codes/Type_Inference_with_LLM/Java_Type_Inference/Results/llm_fixes/fixed_codes/so-fix/hibernate_class_27.java:24: error: incompatible types: try-with-resources not applicable to variable type\n        try (Session session = sessionFactory.openSession()) {\n                     ^\n    (Session cannot be converted to AutoCloseable)\n/home/azmain/GitHub Codes/Type_Inference_with_LLM/Java_Type_Inference/Results/llm_fixes/fixed_codes/so-fix/hibernate_class_27.java:25: error: cannot find symbol\n            Query<ProjectAssignment> query = session.createQuery(\"select distinct new hibernate_class_27.ProjectAssignment(aid, pid, userName) from ProjectAssignment\", ProjectAssignment.class);\n            ^\n  symbol:   class Query\n  location: class hibernate_class_27\n/home/azmain/GitHub Codes/Type_Inference_with_LLM/Java_Type_Inference/Results/llm_fixes/fixed_codes/so-fix/hibernate_class_27.java:25: error: method createQuery in interface Session cannot be applied to given types;\n            Query<ProjectAssignment> query = session.createQuery(\"select distinct new hibernate_class_27.ProjectAssignment(aid, pid, userName) from ProjectAssignment\", ProjectAssignment.class);\n                                                    ^\n  required: String\n  found: String,Class<ProjectAssignment>\n  reason: actual and formal argument lists differ in length\n4 errors\n",
    "return_code": 1
}