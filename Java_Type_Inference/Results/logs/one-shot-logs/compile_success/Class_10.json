{
    "file": "/home/azmain/GitHub Codes/Type_Inference_with_LLM/Java_Type_Inference/snippets_for_test/all-one-shot/Class_10.java",
    "java_code": "package common_JDK;\nimport java.text.NumberFormat;\nimport java.util.Locale;\n/*\n\nDate: 1/19/17\nURL: http://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work\n*/\n\n/**\n   &lt;P&gt;{@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;\n\n   @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;\n **/\npublic class Class_10  {\n   public static final NumberFormat nf = NumberFormat.getNumberInstance(Locale.US);\n   public static final void main(String[] tryCount_inParamIdx0)  {\n      int testCount;\n      //Get try-count from command-line parameter\n         try  {\n            testCount = Integer.parseInt(tryCount_inParamIdx0[0]);\n         }  catch(ArrayIndexOutOfBoundsException | NumberFormatException x)  {\n            throw  new IllegalArgumentException(\"Missing or invalid command line parameter: The number of testCount for each test. \" + x);\n         }\n\n      //Test proper...START\n         int[] intArray = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};\n\n         long lStart = System.nanoTime();\n            for(int i = 0; i < testCount; i++)  {\n               testIterator(intArray);\n            }\n         long lADuration = outputGetNanoDuration(\"A\", lStart);\n\n         lStart = System.nanoTime();\n            for(int i = 0; i < testCount; i++)  {\n               testFor(intArray);\n            }\n         long lBDuration = outputGetNanoDuration(\"B\", lStart);\n\n         outputGetABTestNanoDifference(lADuration, lBDuration, \"A\", \"B\");\n   }\n      private static final void testIterator(int[] int_array)  {\n         int total = 0;\n         for(int i = 0; i < int_array.length; i++)  {\n            total += int_array[i];\n         }\n      }\n      private static final void testFor(int[] int_array)  {\n         int total = 0;\n         for(int i : int_array)  {\n            total += i;\n         }\n      }\n      //Test proper...END\n\n//Timer testing utilities...START\n   public static final long outputGetNanoDuration(String s_testName, long l_nanoStart)  {\n      long lDuration = System.nanoTime() - l_nanoStart;\n      System.out.println(\"Test \" + s_testName + \": \" + nf.format(lDuration) + \" nanoseconds\");\n      return  lDuration;\n   }\n\n   public static final long outputGetABTestNanoDifference(long l_aDuration, long l_bDuration, String s_aTestName, String s_bTestName)  {\n      long lDiff = -1;\n      double dPct = -1.0;\n      String sFaster = null;\n      if(l_aDuration > l_bDuration)  {\n         lDiff = l_aDuration - l_bDuration;\n         dPct = 100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);\n         sFaster = \"B\";\n      }  else  {\n         lDiff = l_bDuration - l_aDuration;\n         dPct = 100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);\n         sFaster = \"A\";\n      }\n      System.out.println(sFaster + \" faster by \" + nf.format(lDiff) + \" nanoseconds (\" + dPct + \"% faster)\");\n      return  lDiff;\n   }\n//Timer testing utilities...END\n}",
    "stdout": "",
    "stderr": "",
    "return_code": 0
}