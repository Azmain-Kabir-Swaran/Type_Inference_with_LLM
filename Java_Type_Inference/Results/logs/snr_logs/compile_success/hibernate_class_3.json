{
    "file": "/home/azmain/snr_fixed/hibernate_class_3.java",
    "java_code": "package hibernate;\n//ID = 906241\n\nimport org.hibernate.dialect.function.VarArgsSQLFunction;\nimport org.hibernate.dialect.function.StandardSQLFunction;\nimport org.hibernate.Hibernate;\nimport org.hibernate.dialect.function.SQLFunctionTemplate;\nimport org.hibernate.dialect.Dialect;\nimport java.sql.Types;\n\npublic class hibernate_class_3 {\n\n\tpublic class SQLiteDialect extends Dialect {\n\t\tpublic SQLiteDialect() {\n\t\t\tsuper();\n\t\t\tregisterColumnType(Types.BIT, \"integer\");\n\t\t\tregisterColumnType(Types.TINYINT, \"tinyint\");\n\t\t\tregisterColumnType(Types.SMALLINT, \"smallint\");\n\t\t\tregisterColumnType(Types.INTEGER, \"integer\");\n\t\t\tregisterColumnType(Types.BIGINT, \"bigint\");\n\t\t\tregisterColumnType(Types.FLOAT, \"float\");\n\t\t\tregisterColumnType(Types.REAL, \"real\");\n\t\t\tregisterColumnType(Types.DOUBLE, \"double\");\n\t\t\tregisterColumnType(Types.NUMERIC, \"numeric\");\n\t\t\tregisterColumnType(Types.DECIMAL, \"decimal\");\n\t\t\tregisterColumnType(Types.CHAR, \"char\");\n\t\t\tregisterColumnType(Types.VARCHAR, \"varchar\");\n\t\t\tregisterColumnType(Types.LONGVARCHAR, \"longvarchar\");\n\t\t\tregisterColumnType(Types.DATE, \"date\");\n\t\t\tregisterColumnType(Types.TIME, \"time\");\n\t\t\tregisterColumnType(Types.TIMESTAMP, \"timestamp\");\n\t\t\tregisterColumnType(Types.BINARY, \"blob\");\n\t\t\tregisterColumnType(Types.VARBINARY, \"blob\");\n\t\t\tregisterColumnType(Types.LONGVARBINARY, \"blob\");\n\t\t\t// registerColumnType(Types.NULL, \"null\");\n\t\t\tregisterColumnType(Types.BLOB, \"blob\");\n\t\t\tregisterColumnType(Types.CLOB, \"clob\");\n\t\t\tregisterColumnType(Types.BOOLEAN, \"integer\");\n\n\t\t\tregisterFunction(\"concat\", new VarArgsSQLFunction(Hibernate.STRING, \"\", \"||\", \"\"));\n\t\t\tregisterFunction(\"mod\", new SQLFunctionTemplate(Hibernate.INTEGER, \"?1 % ?2\"));\n\t\t\tregisterFunction(\"substr\", new StandardSQLFunction(\"substr\", Hibernate.STRING));\n\t\t\tregisterFunction(\"substring\", new StandardSQLFunction(\"substr\", Hibernate.STRING));\n\t\t}\n\n\t\tpublic boolean supportsIdentityColumns() {\n\t\t\treturn true;\n\t\t}\n\n\t\t/*\n\t\t public boolean supportsInsertSelectIdentity() {\n\t\t return true; // As specify in NHibernate dialect\n\t\t }\n\t\t */\n\n\t\tpublic boolean hasDataTypeInIdentityColumn() {\n\t\t\treturn false; // As specify in NHibernate dialect\n\t\t}\n\n\t\t/*\n\t\t public String appendIdentitySelectToInsert(String insertString) {\n\t\t return new StringBuffer(insertString.length()+30). // As specify in NHibernate dialect\n\t\t append(insertString).\n\t\t append(\"; \").append(getIdentitySelectString()).\n\t\t toString();\n\t\t }\n\t\t */\n\n\t\tpublic String getIdentityColumnString() {\n\t\t\t// return \"integer primary key autoincrement\";\n\t\t\treturn \"integer\";\n\t\t}\n\n\t\tpublic String getIdentitySelectString() {\n\t\t\treturn \"select last_insert_rowid()\";\n\t\t}\n\n\t\tpublic boolean supportsLimit() {\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic String getLimitString(String query, boolean hasOffset) {\n\t\t\treturn new StringBuffer(query.length() + 20).append(query)\n\t\t\t\t\t.append(hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString();\n\t\t}\n\n\t\tpublic boolean supportsTemporaryTables() {\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic String getCreateTemporaryTableString() {\n\t\t\treturn \"create temporary table if not exists\";\n\t\t}\n\n\t\tpublic boolean dropTemporaryTableAfterUse() {\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic boolean supportsCurrentTimestampSelection() {\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic boolean isCurrentTimestampSelectStringCallable() {\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic String getCurrentTimestampSelectString() {\n\t\t\treturn \"select current_timestamp\";\n\t\t}\n\n\t\tpublic boolean supportsUnionAll() {\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic boolean hasAlterTable() {\n\t\t\treturn false; // As specify in NHibernate dialect\n\t\t}\n\n\t\tpublic boolean dropConstraints() {\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic String getAddColumnString() {\n\t\t\treturn \"add column\";\n\t\t}\n\n\t\tpublic String getForUpdateString() {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tpublic boolean supportsOuterJoinForUpdate() {\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic String getDropForeignKeyString() {\n\t\t\tthrow new UnsupportedOperationException(\"No drop foreign key syntax supported by SQLiteDialect\");\n\t\t}\n\n\t\tpublic String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey,\n\t\t\t\tString referencedTable, String[] primaryKey, boolean referencesPrimaryKey) {\n\t\t\tthrow new UnsupportedOperationException(\"No add foreign key syntax supported by SQLiteDialect\");\n\t\t}\n\n\t\tpublic String getAddPrimaryKeyConstraintString(String constraintName) {\n\t\t\tthrow new UnsupportedOperationException(\"No add primary key syntax supported by SQLiteDialect\");\n\t\t}\n\n\t\tpublic boolean supportsIfExistsBeforeTableName() {\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic boolean supportsCascadeDelete() {\n\t\t\treturn false;\n\t\t}\n\t}\n}",
    "stdout": "",
    "stderr": "Note: /home/azmain/snr_fixed/hibernate_class_3.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n",
    "return_code": 0
}