{
    "file": "/home/azmain/snr_fixed/gwt_class_33.java",
    "java_code": "package gwt;\n//ID = 2483024\n\nimport com.google.gwt.user.client.ui.Button;\nimport flex.messaging.io.ArrayList;\nimport java.util.Iterator;\nimport com.google.gwt.core.client.EntryPoint;\nimport com.extjs.gxt.ui.client.widget.VerticalPanel;\nimport java.util.List;\nimport com.extjs.gxt.ui.client.widget.HorizontalPanel;\nimport com.google.gwt.user.client.ui.Grid;\nimport com.google.gwt.user.client.ui.ClickListener;\nimport com.google.gwt.user.client.ui.Widget;\nimport com.google.gwt.user.client.ui.RadioButton;\nimport com.google.gwt.user.client.ui.CheckBox;\nimport com.google.gwt.user.client.ui.DockPanel;\n\n/**\n * Entry point classes define <code>onModuleLoad()</code>.\n */\npublic class gwt_class_33 implements EntryPoint {\n\tprivate DockPanel panel;\n\tprivate List clearables;\n\n\t/**\n\t * This is the entry point method.\n\t */\n\tpublic void onModuleLoad() {\n\t\tclearables = new ArrayList();\n\t\tinitDockPanel();\n\t\tpanel.add(buildActionPanel(), DockPanel.SOUTH);\n\t\tpanel.add(buildPizzaTypePanel(), DockPanel.WEST);\n\t\tpanel.add(buildToppingPanel(), DockPanel.EAST);\n\t\tRootPanel.get(\"slicr\").add(panel);\n\t}\n\n\tprivate void initDockPanel() {\n\t\tpanel = new DockPanel();\n\t\tpanel.setBorderWidth(1);\n\t\tpanel.setSpacing(5);\n\t}\n\n\tpublic HorizontalPanel buildActionPanel() {\n\t\tHorizontalPanel actions = new HorizontalPanel();\n\t\tactions.setSpacing(10);\n\t\tButton clear = new Button(\"Clear\");\n\t\tclear.addClickListener(new ClearClickListener());\n\t\tButton newPizza = new Button(\"Another Pizza\");\n\t\tButton submitOrder = new Button(\"Submit\");\n\t\tactions.add(clear);\n\t\tactions.add(newPizza);\n\t\tactions.add(submitOrder);\n\t\treturn actions;\n\t}\n\n\tpublic static final String[] PIZZA_TYPES = new String[] { \"Thin Crust Medium\", \"Thin Crust Large\",\n\t\t\t\"Thin Crust X-Large\", \"Thick Crust Medium\", \"Thick Crust Large\" };\n\n\tprivate VerticalPanel buildPizzaTypePanel() {\n\t\tVerticalPanel pizzaTypes = new VerticalPanel();\n\t\tHTML label = new HTML(\"<h2>Pizza</h2>\");\n\t\tpizzaTypes.add(label);\n\t\tfor (int i = 0; i < PIZZA_TYPES.length; i++) {\n\t\t\tRadioButton radio = new RadioButton(\"pizzaGroup\", PIZZA_TYPES[i]);\n\t\t\tclearables.add(radio);\n\t\t\tpizzaTypes.add(radio);\n\t\t}\n\t\treturn pizzaTypes;\n\t}\n\n\tpublic static final String[] TOPPINGS = new String[] { \"Anchovy\", \"Gardineria\", \"Garlic\", \"Green Pepper\",\n\t\t\t\"Mushrooms\", \"Olives\", \"Onions\", \"Pepperoni\", \"Pineapple\", \"Sausage\", \"Spinach\" };\n\n\tprivate VerticalPanel buildToppingPanel() {\n\t\tVerticalPanel toppings = new VerticalPanel();\n\t\ttoppings.add(new HTML(\"<h2>Toppings</h2>\"));\n\t\tGrid topGrid = new Grid(TOPPINGS.length + 1, 3);\n\t\ttopGrid.setText(0, 0, \"Topping\");\n\t\ttopGrid.setText(0, 1, \"Left\");\n\t\ttopGrid.setText(0, 2, \"Right\");\n\t\tfor (int i = 0; i < TOPPINGS.length; i++) {\n\t\t\tButton button = new Button(TOPPINGS[i]);\n\t\t\tCheckBox leftCheckBox = new CheckBox();\n\t\t\tCheckBox rightCheckBox = new CheckBox();\n\t\t\tclearables.add(leftCheckBox);\n\t\t\tclearables.add(rightCheckBox);\n\t\t\tbutton.addClickListener(new ToppingButtonListener(leftCheckBox, rightCheckBox));\n\t\t\ttopGrid.setWidget(i + 1, 0, button);\n\t\t\ttopGrid.setWidget(i + 1, 1, leftCheckBox);\n\t\t\ttopGrid.setWidget(i + 1, 2, rightCheckBox);\n\t\t}\n\t\ttoppings.add(topGrid);\n\t\treturn toppings;\n\t}\n\n\tprivate class ClearClickListener implements ClickListener {\n\t\tpublic void onClick(Widget sender) {\n\t\t\tfor (Iterator iter = clearables.iterator(); iter.hasNext();) {\n\t\t\t\tCheckBox cb = (CheckBox) iter.next();\n\t\t\t\tcb.setChecked(false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate class ToppingButtonListener implements ClickListener {\n\n\t\tprivate CheckBox cb1;\n\t\tprivate CheckBox cb2;\n\n\t\tpublic ToppingButtonListener(CheckBox cb1, CheckBox cb2) {\n\t\t\tthis.cb1 = cb1;\n\t\t\tthis.cb2 = cb2;\n\t\t}\n\n\t\tpublic void onClick(Widget sender) {\n\t\t\tboolean unchecked = !cb1.isChecked() && !cb2.isChecked();\n\t\t\tcb1.setChecked(unchecked);\n\t\t\tcb2.setChecked(unchecked);\n\t\t}\n\t}\n}",
    "stdout": "",
    "stderr": "/home/azmain/snr_fixed/gwt_class_33.java:34: error: cannot find symbol\n\t\tRootPanel.get(\"slicr\").add(panel);\n\t\t^\n  symbol:   variable RootPanel\n  location: class gwt_class_33\n/home/azmain/snr_fixed/gwt_class_33.java:61: error: cannot find symbol\n\t\tHTML label = new HTML(\"<h2>Pizza</h2>\");\n\t\t^\n  symbol:   class HTML\n  location: class gwt_class_33\n/home/azmain/snr_fixed/gwt_class_33.java:61: error: cannot find symbol\n\t\tHTML label = new HTML(\"<h2>Pizza</h2>\");\n\t\t                 ^\n  symbol:   class HTML\n  location: class gwt_class_33\n/home/azmain/snr_fixed/gwt_class_33.java:76: error: cannot find symbol\n\t\ttoppings.add(new HTML(\"<h2>Toppings</h2>\"));\n\t\t                 ^\n  symbol:   class HTML\n  location: class gwt_class_33\nNote: Some input files use or override a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: /home/azmain/snr_fixed/gwt_class_33.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n4 errors\n",
    "return_code": 1
}