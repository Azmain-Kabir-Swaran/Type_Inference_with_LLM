{
    "file": "/home/azmain/snr_fixed/Class_19.java",
    "java_code": "/*\nDate: 1/19/17\nURL: http://stackoverflow.com/questions/1519736/random-shuffling-of-an-array\n*/\npackage common_JDK;\n\nimport java.util.List;\nimport java.util.Collection;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.Iterator;\nimport java.util.Random;\nimport java.util.ArrayList;\n\nclass Test {\n\tpublic static void main(String args[]) {\n\t\tint[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };\n\n\t\tshuffleArray(solutionArray);\n\t\tfor (int i = 0; i < solutionArray.length; i++) {\n\t\t\tSystem.out.print(solutionArray[i] + \" \");\n\t\t}\n\t\tSystem.out.println();\n\n\t}\n\n\t// Implementing Fisher???Yates shuffle\n\tstatic void shuffleArray(int[] ar) {\n\t\t// If running on Java 6 or older, use `new Random()` on RHS here\n\t\tRandom rnd = ThreadLocalRandom.current();\n\t\tfor (int i = ar.length - 1; i > 0; i--) {\n\t\t\tint index = rnd.nextInt(i + 1);\n\t\t\t// Simple swap\n\t\t\tint a = ar[index];\n\t\t\tar[index] = ar[i];\n\t\t\tar[i] = a;\n\t\t}\n\t}\n\n\tprotected static List<Integer> range(int n) {\n\t\treturn toList(new Range(n), new ArrayList<Integer>());\n\t}\n\n\tprotected static <T> List<T> toList(Iterable<T> iterable) {\n\t\treturn toList(iterable, new ArrayList<T>());\n\t}\n\n\tprotected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) {\n\t\taddAll(destination, iterable.iterator());\n\n\t\treturn destination;\n\t}\n\n\tprotected static <T> void addAll(Collection<T> collection, Iterator<T> iterator) {\n\t\twhile (iterator.hasNext()) {\n\t\t\tcollection.add(iterator.next());\n\t\t}\n\t}\n\n\tprivate static class Range implements Iterable<Integer> {\n\t\tprivate int start;\n\t\tprivate int stop;\n\t\tprivate int step;\n\n\t\tprivate Range(int n) {\n\t\t\tthis(0, n, 1);\n\t\t}\n\n\t\tprivate Range(int start, int stop) {\n\t\t\tthis(start, stop, 1);\n\t\t}\n\n\t\tprivate Range(int start, int stop, int step) {\n\t\t\tthis.start = start;\n\t\t\tthis.stop = stop;\n\t\t\tthis.step = step;\n\t\t}\n\n\t\t@Override\n\t\tpublic Iterator<Integer> iterator() {\n\t\t\tfinal int min = start;\n\t\t\tfinal int max = stop / step;\n\n\t\t\treturn new Iterator<Integer>() {\n\t\t\t\tprivate int current = min;\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean hasNext() {\n\t\t\t\t\treturn current < max;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer next() {\n\t\t\t\t\tif (hasNext()) {\n\t\t\t\t\t\treturn current++ * step;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new NoSuchElementException(\"Range reached the end\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void remove() {\n\t\t\t\t\tthrow new UnsupportedOperationException(\"Can't remove values from a Range\");\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n}",
    "stdout": "",
    "stderr": "/home/azmain/snr_fixed/Class_19.java:96: error: cannot find symbol\n\t\t\t\t\t\tthrow new NoSuchElementException(\"Range reached the end\");\n\t\t\t\t\t\t          ^\n  symbol: class NoSuchElementException\n1 error\n",
    "return_code": 1
}