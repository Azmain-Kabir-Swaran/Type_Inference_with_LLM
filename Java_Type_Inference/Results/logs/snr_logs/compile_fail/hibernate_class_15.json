{
    "file": "/home/azmain/snr_fixed/hibernate_class_15.java",
    "java_code": "package hibernate;\n//ID = 1561543\n\nimport java.io.ByteArrayOutputStream;\nimport android.database.SQLException;\nimport java.io.IOException;\nimport java.sql.Date;\nimport java.io.InputStream;\nimport java.sql.Blob;\n\n/**\n * @author dudekta\n */\npublic class hibernate_class_15 {\n\tprivate Long id;\n\tprivate Date creationTimeStamp;\n\tprivate String name;\n\tprivate String type;\n\tprivate String description;\n\tprivate Long length;\n\tprivate byte[] content;\n\n\t/** Don't invoke this. Used by Hibernate only. */\n\tpublic void setContentBlob(Blob imageBlob) {\n\t\tthis.content = this.toByteArray(imageBlob);\n\t}\n\n\t/** Don't invoke this. Used by Hibernate only. */\n\tpublic Blob getContentBlob() {\n\t\treturn Hibernate.createBlob(this.content);\n\t}\n\n\tprivate byte[] toByteArray(Blob fromBlob) {\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\ttry {\n\t\t\treturn toByteArrayImpl(fromBlob, baos);\n\t\t} catch (SQLException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\tif (baos != null) {\n\t\t\t\ttry {\n\t\t\t\t\tbaos.close();\n\t\t\t\t} catch (IOException ex) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate byte[] toByteArrayImpl(Blob fromBlob, ByteArrayOutputStream baos) throws SQLException, IOException {\n\t\tbyte[] buf = new byte[4000];\n\t\tInputStream is = fromBlob.getBinaryStream();\n\t\ttry {\n\t\t\tfor (;;) {\n\t\t\t\tint dataSize = is.read(buf);\n\n\t\t\t\tif (dataSize == -1)\n\t\t\t\t\tbreak;\n\t\t\t\tbaos.write(buf, 0, dataSize);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (is != null) {\n\t\t\t\ttry {\n\t\t\t\t\tis.close();\n\t\t\t\t} catch (IOException ex) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn baos.toByteArray();\n\t}\n\n\t/**\n\t * @return Returns the creationTimeStamp.\n\t */\n\tpublic Date getCreationTimeStamp() {\n\t\treturn creationTimeStamp;\n\t}\n\n\t/**\n\t * @param creationTimeStamp\n\t *            The creationTimeStamp to set.\n\t */\n\tpublic void setCreationTimeStamp(Date creationTimeStamp) {\n\t\tthis.creationTimeStamp = creationTimeStamp;\n\t}\n\n\t/**\n\t * @return Returns the description.\n\t */\n\tpublic String getDescription() {\n\t\treturn description;\n\t}\n\n\t/**\n\t * @param description\n\t *            The description to set.\n\t */\n\tpublic void setDescription(String description) {\n\t\tthis.description = description;\n\t}\n\n\t/**\n\t * @return Returns the id.\n\t */\n\tpublic Long getId() {\n\t\treturn id;\n\t}\n\n\t/**\n\t * @param id\n\t *            The id to set.\n\t */\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\n\t/**\n\t * @return Returns the length.\n\t */\n\tpublic Long getLength() {\n\t\treturn length;\n\t}\n\n\t/**\n\t * @param length\n\t *            The length to set.\n\t */\n\tpublic void setLength(Long length) {\n\t\tthis.length = length;\n\t}\n\n\t/**\n\t * @return Returns the name.\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\t/**\n\t * @param name\n\t *            The name to set.\n\t */\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * @return Returns the type.\n\t */\n\tpublic String getType() {\n\t\treturn type;\n\t}\n\n\t/**\n\t * @param type\n\t *            The type to set.\n\t */\n\tpublic void setType(String type) {\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * @return Returns the content.\n\t */\n\tpublic byte[] getContent() {\n\t\treturn content;\n\t}\n\n\t/**\n\t * @param content\n\t *            The content to set.\n\t */\n\tpublic void setContent(byte[] content) {\n\t\tthis.content = content;\n\t}\n}",
    "stdout": "",
    "stderr": "/home/azmain/snr_fixed/hibernate_class_15.java:30: error: cannot find symbol\n\t\treturn Hibernate.createBlob(this.content);\n\t\t       ^\n  symbol:   variable Hibernate\n  location: class hibernate_class_15\n1 error\n",
    "return_code": 1
}