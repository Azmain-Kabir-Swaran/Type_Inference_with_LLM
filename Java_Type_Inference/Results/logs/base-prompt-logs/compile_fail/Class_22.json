{
    "file": "/home/azmain/code_for_compilation_test/base-prompt/Class_22.java",
    "java_code": "import java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.text.DecimalFormat;\nimport java.util.List;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.text.DecimalFormat;\nimport java.util.List;\n\npublic class Class_22 {\n    /** @see http://stackoverflow.com/questions/4637215 */\n    public class TwoRoot extends JFrame {\n\n        private static final String s = \"0.000000000000000\";\n        private JProgressBar progressBar = new JProgressBar(0, 100);\n        private JLabel label = new JLabel(s, JLabel.CENTER);\n\n        public TwoRoot() {\n            this.setLayout(new GridLayout(0, 1));\n            this.setTitle(\"???2\");\n            this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            this.add(progressBar);\n            this.add(label);\n            this.setSize(161, 100);\n            this.setLocationRelativeTo(null);\n            this.setVisible(true);\n        }\n\n        public void runCalc() {\n            progressBar.setIndeterminate(true);\n            TwoWorker task = new TwoWorker();\n            task.addPropertyChangeListener(new PropertyChangeListener() {\n\n                @Override\n                public void propertyChange(PropertyChangeEvent e) {\n                    if (\"progress\".equals(e.getPropertyName())) {\n                        progressBar.setIndeterminate(false);\n                        progressBar.setValue((Integer) e.getNewValue());\n                    }\n                }\n            });\n            task.execute();\n        }\n\n        private class TwoWorker extends SwingWorker<Double, Double> {\n\n            private static final int N = 5;\n            private final DecimalFormat df = new DecimalFormat(s);\n            double x = 1;\n\n            @Override\n            protected Double doInBackground() throws Exception {\n                for (int i = 1; i <= N; i++) {\n                    x = x - (((x * x - 2) / (2 * x)));\n                    setProgress(i * (100 / N));\n                    publish(Double.valueOf(x));\n                    Thread.sleep(1000); // simulate latency\n                }\n                return Double.valueOf(x);\n            }\n\n            @Override\n            protected void process(List<Double> chunks) {\n                for (double d : chunks) {\n                    label.setText(df.format(d));\n                }\n            }\n        }\n\n        public static void main(String[] args) {\n            EventQueue.invokeLater(new Runnable() {\n\n                @Override\n                public void run() {\n                    TwoRoot t = new TwoRoot();\n                    t.runCalc();\n                }\n            });\n        }\n    }\n    JFrame progressFrame;\n    JProgressBar progressBar;\n    JLabel label = new JLabel(\"Calculating\");;\n    Container pane;\n\n    double amountSaved = 0;\n    int i = 0;\n    int iterations;\n\n    public void createGui(int iterations) {\n        //Create all components\n        progressFrame = new JFrame(\"Calculation Progress\");\n        progressFrame.setSize(300, 100);\n        pane = progressFrame.getContentPane();\n        pane.setLayout(null);\n        label = new JLabel(\"Calculating\");\n        label.setBounds(115, 35, 200, 25);\n        progressBar = new JProgressBar(0, iterations);\n        progressBar.setBounds(10, 10, 280, 20);\n        progressBar.setStringPainted(true);\n        //Add components to pane\n        pane.add(progressBar);\n        pane.add(label);\n        //Make frame visible\n        progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        progressFrame.setResizable(false); //No resize\n        progressFrame.setLocationRelativeTo(null);\n        progressFrame.setVisible(true);\n    }\n\n    public void runCalcs (double MP, double StepAmt, double L1, double L2,\n                          double C1, double C2, double IM1, double IM2, double M1Start, double M2Start) {\n\n        progressBar.setIndeterminate(false);\n        TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);\n        task.addPropertyChangeListener(new PropertyChangeListener() {\n\n            @Override\n            public void propertyChange(PropertyChangeEvent e) {\n                if (\"progress\".equals(e.getPropertyName())) {\n                    progressBar.setIndeterminate(false);\n                    progressBar.setValue((Integer) e.getNewValue());\n                }\n            }\n        });\n        task.execute();\n    } //end method runCalcs\n\n    public class TwoWorker extends SwingWorker<Double, Double> {\n\n        private final double MP, StepAmt,L1, L2,\n                C1, C2, IM1, IM2, M1Start, M2Start;\n\n        public TwoWorker(double MPa, double StepAmta, double L1a, double L2a,\n                         double C1a, double C2a, double IM1a, double IM2a, double M1Starta, double M2Starta) {\n\n            MP = MPa;\n            StepAmt = StepAmta;\n            L1 = L1a;\n            L2 = L2a;\n            C1 = C1a;\n            C2 = C2a;\n            IM1 = IM1a;\n            IM2 = IM2a;\n            M1Start = M1Starta;\n            M2Start = M2Starta;\n        }\n        @Override\n        protected Double doInBackground() {\n\n            double M1 = M1Start;\n            double M2 = M2Start;\n\n            // Set MinLoop as maximum to start\n            // Loan 1\n            double N1 = (Math.log10(1 - IM1 * L1 / M1) * -1)/Math.log10(1 + IM1);\n            double M1Sum = M1 * N1;\n            // Loan 2\n            double N2 = (Math.log10(1 - IM2 * L2 / M2) * -1)/Math.log10(1 + IM2);\n            double M2Sum = M2 * N2;\n            double minLoop = M1Sum + M2Sum;\n            double MTotal = 0;\n\n            // Define variables for mins\n            double MP1 = 0;\n            double MP2 = 0;\n            double NP1 = 0;\n            double NP2 = 0;\n            double MP1Sum = 0;\n            double MP2Sum = 0;\n\n            while ( M1 <= MP - M2Start && M2 >= M2Start ) {\n                N1 = (Math.log10(1 - IM1 * L1 / M1) * -1)/Math.log10(1 + IM1);\n                M1Sum = N1 * M1;\n                N2 = (Math.log10(1 - IM2 * L2 / M2) * -1)/Math.log10(1 + IM2);\n                M2Sum = N2 * M2;\n                MTotal = M1Sum + M2Sum;\n                if (MTotal < minLoop) {\n                    minLoop = MTotal;\n                    MP1 = M1;\n                    MP2 = M2;\n                    NP1 = N1;\n                    NP2 = N2;\n                    MP1Sum = M1Sum;\n                    MP2Sum = M2Sum;\n                } // end if\n                i++;\n                progressBar.setValue(i);\n                M1 = M1 + StepAmt;\n                M2 = MP - M1;\n                // Reset monthly sums\n                M1Sum = 0;\n                M2Sum = 0;\n            } // end while\n\n            System.out.printf(\"MP1 = %.2f\\n\", MP1);\n            System.out.printf(\"MP2 = %.2f\\n\", MP2);\n            System.out.printf(\"NP1 = %.2f\\n\", NP1);\n            System.out.printf(\"NP2 = %.2f\\n\", NP2);\n            System.out.printf(\"MP1Sum = %.2f\\n\", MP1Sum);\n            System.out.printf(\"MP2Sum = %.2f\\n\", MP2Sum);\n            System.out.printf(\"MTotal = %.2f\\n\", minLoop);\n            System.out.printf(\"i = %d\\n\",i);\n            System.out.printf(\"M1Start = %.2f\\n\", M1Start);\n            System.out.printf(\"M2Start = %.2f\\n\", M2Start);\n            System.out.printf(\"MP= %.2f\\n\",MP);\n\n            // if there's a value for current payments, calculate amount saved\n            if( C1 > 0 ) {\n                double CN1 = (Math.log10(1 - IM1 * L1 / C1) * -1)/Math.log10(1 + IM1);\n                double CT1 = CN1 * C1;\n\n                double CN2 = (Math.log10(1 - IM2 * L2 / C2) * -1)/Math.log10(1 + IM2);\n                double CT2 = CN2 * C2;\n\n                double CTotal = CT1 + CT2;\n                amountSaved = CTotal - minLoop;\n            } // end if\n\n            return null;\n\n        } // end doInBackGround\n\n        @Override\n        protected void done() {\n            label.setBounds(133, 35, 200, 25);\n            label.setText(\"Done!\");\n        }\n    } // end TwoWorker\n\n\n    public double savedReturn() {\n        return amountSaved;\n    }\n}",
    "stdout": "",
    "stderr": "/home/azmain/code_for_compilation_test/base-prompt/Class_22.java:77: error: non-static variable this cannot be referenced from a static context\n                    TwoRoot t = new TwoRoot();\n                                ^\n/home/azmain/code_for_compilation_test/base-prompt/Class_22.java:72: error: Illegal static declaration in inner class Class_22.TwoRoot\n        public static void main(String[] args) {\n                           ^\n  modifier 'static' is only allowed in constant variable declarations\n2 errors\n",
    "return_code": 1
}