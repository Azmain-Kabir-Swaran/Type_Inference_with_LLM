{
    "file": "/home/azmain/code_for_compilation_test/base-prompt/Class_12.java",
    "java_code": "import java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\n\npublic final class Class_12 {\n    public static String fromCalendar(final Calendar calendar) {\n        Date date = calendar.getTime();\n        String formatted = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\").format(date);\n        return formatted.substring(0, 22) + \":\" + formatted.substring(22);\n    }\n\n    public static String now() {\n        return fromCalendar(GregorianCalendar.getInstance());\n    }\n\n    public static Calendar toCalendar(final String iso8601string) throws ParseException {\n        Calendar calendar = GregorianCalendar.getInstance();\n        String s = iso8601string.replace(\"Z\", \"+00:00\");\n        try {\n            s = s.substring(0, 22) + s.substring(23);\n        } catch (IndexOutOfBoundsException e) {\n            throw new ParseException(\"Invalid length\", 0);\n        }\n        Date date = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\").parse(s);\n        calendar.setTime(date);\n        return calendar;\n    }\n\n    public static class ISO8601DateFormatter {\n\n        private final DateFormat DATE_FORMAT_1 = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n        private final DateFormat DATE_FORMAT_2 = new SimpleDateFormat(\"yyyy-MM-dd'T'HHmmssZ\");\n        private static final String UTC_PLUS = \"+\";\n        private static final String UTC_MINUS = \"-\";\n\n        public Date toDate(String iso8601string) throws ParseException {\n            iso8601string = iso8601string.trim();\n            if(iso8601string.toUpperCase().indexOf(\"Z\")>0){\n                iso8601string = iso8601string.toUpperCase().replace(\"Z\", \"+0000\");\n            }else if(((iso8601string.indexOf(UTC_PLUS))>0)){\n                iso8601string = replaceColon(iso8601string, iso8601string.indexOf(UTC_PLUS));\n                iso8601string = appendZeros(iso8601string, iso8601string.indexOf(UTC_PLUS), UTC_PLUS);\n            }else if(((iso8601string.indexOf(UTC_MINUS))>0)){\n                iso8601string = replaceColon(iso8601string, iso8601string.indexOf(UTC_MINUS));\n                iso8601string = appendZeros(iso8601string, iso8601string.indexOf(UTC_MINUS), UTC_MINUS);\n            }\n\n            Date date = null;\n            if(iso8601string.contains(\":\"))\n                date = DATE_FORMAT_1.parse(iso8601string);\n            else{\n                date = DATE_FORMAT_2.parse(iso8601string);\n            }\n            return date;\n        }\n\n        public String toISO8601String(Date date){\n            return DATE_FORMAT_1.format(date);\n        }\n\n        private String replaceColon(String sourceStr, int offsetIndex){\n            if(sourceStr.substring(offsetIndex).contains(\":\"))\n                return sourceStr.substring(0, offsetIndex) + sourceStr.substring(offsetIndex).replace(\":\", \"\");\n            return sourceStr;\n        }\n\n        private String appendZeros(String sourceStr, int offsetIndex, String offsetChar){\n            if((sourceStr.length()-1)-sourceStr.indexOf(offsetChar,offsetIndex)<=2)\n                return sourceStr + \"00\";\n            return sourceStr;\n        }\n    }\n}",
    "stdout": "",
    "stderr": "",
    "return_code": 0
}