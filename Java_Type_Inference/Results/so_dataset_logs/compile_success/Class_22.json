{
    "file": "/home/azmain/GitHub Codes/so_dataset/Class_22.java",
    "java_code": "/*\nDate: 1/19/17\nURL: http://stackoverflow.com/questions/4637215/can-a-progress-bar-be-used-in-a-class-outside-main\n*/\npackage common_JDK;\nimport java.awt.Container;\nimport java.awt.EventQueue;\nimport java.awt.GridLayout;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.text.DecimalFormat;\nimport java.util.List;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JProgressBar;\nimport javax.swing.SwingWorker;\npublic class Class_22 {\n\t/** @see http://stackoverflow.com/questions/4637215 */\n\tpublic class TwoRoot extends JFrame {\n\n\t    private static final String s = \"0.000000000000000\";\n\t    private JProgressBar progressBar = new JProgressBar(0, 100);\n\t    private JLabel label = new JLabel(s, JLabel.CENTER);\n\n\t    public TwoRoot() {\n\t        this.setLayout(new GridLayout(0, 1));\n\t        this.setTitle(\"???2\");\n\t        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t        this.add(progressBar);\n\t        this.add(label);\n\t        this.setSize(161, 100);\n\t        this.setLocationRelativeTo(null);\n\t        this.setVisible(true);\n\t    }\n\n\t    public void runCalc() {\n\t        progressBar.setIndeterminate(true);\n\t        TwoWorker task = new TwoWorker();\n\t        task.addPropertyChangeListener(new PropertyChangeListener() {\n\n\t            @Override\n\t            public void propertyChange(PropertyChangeEvent e) {\n\t                if (\"progress\".equals(e.getPropertyName())) {\n\t                    progressBar.setIndeterminate(false);\n\t                    progressBar.setValue((Integer) e.getNewValue());\n\t                }\n\t            }\n\t        });\n\t        task.execute();\n\t    }\n\n\t    private class TwoWorker extends SwingWorker<Double, Double> {\n\n\t        private static final int N = 5;\n\t        private final DecimalFormat df = new DecimalFormat(s);\n\t        double x = 1;\n\n\t        @Override\n\t        protected Double doInBackground() throws Exception {\n\t            for (int i = 1; i <= N; i++) {\n\t                x = x - (((x * x - 2) / (2 * x)));\n\t                setProgress(i * (100 / N));\n\t                publish(Double.valueOf(x));\n\t                Thread.sleep(1000); // simulate latency\n\t            }\n\t            return Double.valueOf(x);\n\t        }\n\n\t        @Override\n\t        protected void process(List<Double> chunks) {\n\t            for (double d : chunks) {\n\t                label.setText(df.format(d));\n\t            }\n\t        }\n\t    }\n\n\t    public void main(String[] args) {\n\t        EventQueue.invokeLater(new Runnable() {\n\n\t            @Override\n\t            public void run() {\n\t                TwoRoot t = new TwoRoot();\n\t                t.runCalc();\n\t            }\n\t        });\n\t    }\n\t}\n\tJFrame progressFrame;\n\tJProgressBar progressBar;\n\tJLabel label = new JLabel(\"Calculating...\");;\n\tContainer pane;\n\n\tdouble amountSaved = 0;\n\tint i = 0;\n\tint iterations;\n\n\tpublic void createGui(int iterations) {\n\t       //Create all components\n\t      progressFrame = new JFrame(\"Calculation Progress\");\n\t      progressFrame.setSize(300, 100);\n\t      pane = progressFrame.getContentPane();\n\t      pane.setLayout(null);\n\t      label = new JLabel(\"Calculating...\");\n\t      label.setBounds(115, 35, 200, 25);\n\t      progressBar = new JProgressBar(0, iterations);\n\t      progressBar.setBounds(10, 10, 280, 20);\n\t      progressBar.setStringPainted(true);\n\t      //Add components to pane\n\t      pane.add(progressBar);\n\t      pane.add(label);\n\t      //Make frame visible\n\t      progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t      progressFrame.setResizable(false); //No resize\n\t      progressFrame.setLocationRelativeTo(null);\n\t      progressFrame.setVisible(true);\n\t}\n\n\tpublic void runCalcs (double MP, double StepAmt, double L1, double L2,\n\t        double C1, double C2, double IM1, double IM2, double M1Start, double M2Start) {\n\n\t    progressBar.setIndeterminate(false);\n\t    TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);\n\t    task.addPropertyChangeListener(new PropertyChangeListener() {\n\n\t        @Override\n\t        public void propertyChange(PropertyChangeEvent e) {\n\t            if (\"progress\".equals(e.getPropertyName())) {\n\t                progressBar.setIndeterminate(false);\n\t                progressBar.setValue((Integer) e.getNewValue());\n\t            }\n\t        }\n\t    });\n\t    task.execute();\n\t} //end method runCalcs\n\n\tpublic class TwoWorker extends SwingWorker<Double, Double> {\n\n\t    private final double MP, StepAmt,L1, L2,\n\t        C1, C2, IM1, IM2, M1Start, M2Start;\n\n\t    public TwoWorker(double MPa, double StepAmta, double L1a, double L2a,\n\t        double C1a, double C2a, double IM1a, double IM2a, double M1Starta, double M2Starta) {\n\n\t        MP = MPa;\n\t        StepAmt = StepAmta;\n\t        L1 = L1a;\n\t        L2 = L2a;\n\t        C1 = C1a;\n\t        C2 = C2a;\n\t        IM1 = IM1a;\n\t        IM2 = IM2a;\n\t        M1Start = M1Starta;\n\t        M2Start = M2Starta;\n\t       }\n\t    @Override\n\t    protected Double doInBackground() {\n\n\t        double M1 = M1Start;\n\t        double M2 = M2Start;\n\n\t    // Set MinLoop as maximum to start\n\t    // Loan 1\n\t    double N1 = (Math.log10(1 - IM1 * L1 / M1) * -1)/Math.log10(1 + IM1);\n\tdouble M1Sum = M1 * N1;\n\t// Loan 2\n\tdouble N2 = (Math.log10(1 - IM2 * L2 / M2) * -1)/Math.log10(1 + IM2);\n\tdouble M2Sum = M2 * N2;\n\tdouble minLoop = M1Sum + M2Sum;\n\tdouble MTotal = 0;\n\n\t    // Define variables for mins\n\tdouble MP1 = 0;\n\tdouble MP2 = 0;\n\tdouble NP1 = 0;\n\tdouble NP2 = 0;\n\tdouble MP1Sum = 0;\n\tdouble MP2Sum = 0;\n\n\t    while ( M1 <= MP - M2Start && M2 >= M2Start ) {\n\t        N1 = (Math.log10(1 - IM1 * L1 / M1) * -1)/Math.log10(1 + IM1);\n\t        M1Sum = N1 * M1;\n\t        N2 = (Math.log10(1 - IM2 * L2 / M2) * -1)/Math.log10(1 + IM2);\n\t        M2Sum = N2 * M2;\n\t        MTotal = M1Sum + M2Sum;\n\t        if (MTotal < minLoop) {\n\t            minLoop = MTotal;\n\t            MP1 = M1;\n\t            MP2 = M2;\n\t            NP1 = N1;\n\t            NP2 = N2;\n\t            MP1Sum = M1Sum;\n\t            MP2Sum = M2Sum;\n\t        } // end if\n\t                    i++;\n\t                    progressBar.setValue(i);\n\t                M1 = M1 + StepAmt;\n\t        M2 = MP - M1;\n\t        // Reset monthly sums\n\t        M1Sum = 0;\n\t        M2Sum = 0;\n\t    } // end while\n\n\t    System.out.printf(\"MP1 = %.2f\\n\", MP1);\n\t    System.out.printf(\"MP2 = %.2f\\n\", MP2);\n\t    System.out.printf(\"NP1 = %.2f\\n\", NP1);\n\t    System.out.printf(\"NP2 = %.2f\\n\", NP2);\n\t    System.out.printf(\"MP1Sum = %.2f\\n\", MP1Sum);\n\t    System.out.printf(\"MP2Sum = %.2f\\n\", MP2Sum);\n\t            System.out.printf(\"MTotal = %.2f\\n\", minLoop);\n\t            System.out.printf(\"i = %d\\n\",i);\n\t            System.out.printf(\"M1Start = %.2f\\n\", M1Start);\n\t    System.out.printf(\"M2Start = %.2f\\n\", M2Start);\n\t            System.out.printf(\"MP= %.2f\\n\",MP);\n\n\t// if there's a value for current payments, calculate amount saved\n\tif( C1 > 0 ) {\n\t    double CN1 = (Math.log10(1 - IM1 * L1 / C1) * -1)/Math.log10(1 + IM1);\n\t    double CT1 = CN1 * C1;\n\n\t    double CN2 = (Math.log10(1 - IM2 * L2 / C2) * -1)/Math.log10(1 + IM2);\n\t    double CT2 = CN2 * C2;\n\n\t    double CTotal = CT1 + CT2;\n\t    amountSaved = CTotal - minLoop;\n\t    } // end if\n\n\t    return null;\n\n\t} // end doInBackGround\n\n\t    @Override\n\t    protected void done() {\n\t        label.setBounds(133, 35, 200, 25);\n\t        label.setText(\"Done!\");\n\t    }\n\t} // end TwoWorker\n\n\n\tpublic double savedReturn() {\n\t    return amountSaved;\n\t}\n}",
    "stdout": "",
    "stderr": "",
    "return_code": 0
}