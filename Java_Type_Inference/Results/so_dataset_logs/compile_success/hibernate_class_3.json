{
    "file": "/home/azmain/GitHub Codes/so_dataset/hibernate_class_3.java",
    "java_code": "\n//ID = 906241\nimport java.sql.Types;\n\nimport org.hibernate.dialect.Dialect;\nimport org.hibernate.dialect.function.StandardSQLFunction;\nimport org.hibernate.dialect.function.SQLFunctionTemplate;\nimport org.hibernate.dialect.function.VarArgsSQLFunction;\nimport org.hibernate.Hibernate;\n public class hibernate_class_3{\n\npublic class SQLiteDialect extends Dialect {\n    public SQLiteDialect() {\n     super();\n     registerColumnType(Types.BIT, \"integer\");\n     registerColumnType(Types.TINYINT, \"tinyint\");\n     registerColumnType(Types.SMALLINT, \"smallint\");\n     registerColumnType(Types.INTEGER, \"integer\");\n     registerColumnType(Types.BIGINT, \"bigint\");\n     registerColumnType(Types.FLOAT, \"float\");\n     registerColumnType(Types.REAL, \"real\");\n     registerColumnType(Types.DOUBLE, \"double\");\n     registerColumnType(Types.NUMERIC, \"numeric\");\n     registerColumnType(Types.DECIMAL, \"decimal\");\n     registerColumnType(Types.CHAR, \"char\");\n     registerColumnType(Types.VARCHAR, \"varchar\");\n     registerColumnType(Types.LONGVARCHAR, \"longvarchar\");\n     registerColumnType(Types.DATE, \"date\");\n     registerColumnType(Types.TIME, \"time\");\n     registerColumnType(Types.TIMESTAMP, \"timestamp\");\n     registerColumnType(Types.BINARY, \"blob\");\n     registerColumnType(Types.VARBINARY, \"blob\");\n     registerColumnType(Types.LONGVARBINARY, \"blob\");\n     // registerColumnType(Types.NULL, \"null\");\n     registerColumnType(Types.BLOB, \"blob\");\n     registerColumnType(Types.CLOB, \"clob\");\n     registerColumnType(Types.BOOLEAN, \"integer\");\n\n     registerFunction(\"concat\", new VarArgsSQLFunction(Hibernate.STRING, \"\",\n       \"||\", \"\"));\n     registerFunction(\"mod\", new SQLFunctionTemplate(Hibernate.INTEGER,\n       \"?1 % ?2\"));\n     registerFunction(\"substr\", new StandardSQLFunction(\"substr\",\n       Hibernate.STRING));\n     registerFunction(\"substring\", new StandardSQLFunction(\"substr\",\n       Hibernate.STRING));\n    }\n\n    public boolean supportsIdentityColumns() {\n     return true;\n    }\n\n    /*\n     public boolean supportsInsertSelectIdentity() {\n     return true; // As specify in NHibernate dialect\n     }\n     */\n\n    public boolean hasDataTypeInIdentityColumn() {\n     return false; // As specify in NHibernate dialect\n    }\n\n    /*\n     public String appendIdentitySelectToInsert(String insertString) {\n     return new StringBuffer(insertString.length()+30). // As specify in NHibernate dialect\n     append(insertString).\n     append(\"; \").append(getIdentitySelectString()).\n     toString();\n     }\n     */\n\n    public String getIdentityColumnString() {\n     // return \"integer primary key autoincrement\";\n     return \"integer\";\n    }\n\n    public String getIdentitySelectString() {\n     return \"select last_insert_rowid()\";\n    }\n\n    public boolean supportsLimit() {\n     return true;\n    }\n\n    public String getLimitString(String query, boolean hasOffset) {\n     return new StringBuffer(query.length() + 20).append(query).append(\n       hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString();\n    }\n\n    public boolean supportsTemporaryTables() {\n     return true;\n    }\n\n    public String getCreateTemporaryTableString() {\n     return \"create temporary table if not exists\";\n    }\n\n    public boolean dropTemporaryTableAfterUse() {\n     return false;\n    }\n\n    public boolean supportsCurrentTimestampSelection() {\n     return true;\n    }\n\n    public boolean isCurrentTimestampSelectStringCallable() {\n     return false;\n    }\n\n    public String getCurrentTimestampSelectString() {\n     return \"select current_timestamp\";\n    }\n\n    public boolean supportsUnionAll() {\n     return true;\n    }\n\n    public boolean hasAlterTable() {\n     return false; // As specify in NHibernate dialect\n    }\n\n    public boolean dropConstraints() {\n     return false;\n    }\n\n    public String getAddColumnString() {\n     return \"add column\";\n    }\n\n    public String getForUpdateString() {\n     return \"\";\n    }\n\n    public boolean supportsOuterJoinForUpdate() {\n     return false;\n    }\n\n    public String getDropForeignKeyString() {\n     throw new UnsupportedOperationException(\n       \"No drop foreign key syntax supported by SQLiteDialect\");\n    }\n\n    public String getAddForeignKeyConstraintString(String constraintName,\n      String[] foreignKey, String referencedTable, String[] primaryKey,\n      boolean referencesPrimaryKey) {\n     throw new UnsupportedOperationException(\n       \"No add foreign key syntax supported by SQLiteDialect\");\n    }\n\n    public String getAddPrimaryKeyConstraintString(String constraintName) {\n     throw new UnsupportedOperationException(\n       \"No add primary key syntax supported by SQLiteDialect\");\n    }\n\n    public boolean supportsIfExistsBeforeTableName() {\n     return true;\n    }\n\n    public boolean supportsCascadeDelete() {\n     return false;\n    }\n}\n }",
    "stdout": "",
    "stderr": "Note: /home/azmain/GitHub Codes/so_dataset/hibernate_class_3.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n",
    "return_code": 0
}