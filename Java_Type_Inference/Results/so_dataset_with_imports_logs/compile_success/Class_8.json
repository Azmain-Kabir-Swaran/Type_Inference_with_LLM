{
    "file": "/home/azmain/GitHub Codes/so_dataset_with_imports/Class_8.java",
    "java_code": "package common_JDK;\n/*\n Date: 1/19/17\n URL: http://stackoverflow.com/questions/3422673/evaluating-a-math-expression-given-in-string-formy\n */\npublic class Class_8 {\n\tpublic static double eval(final String str) {\n\t    return new Object() {\n\t        int pos = -1, ch;\n\n\t        void nextChar() {\n\t            ch = (++pos < str.length()) ? str.charAt(pos) : -1;\n\t        }\n\n\t        boolean eat(int charToEat) {\n\t            while (ch == ' ') nextChar();\n\t            if (ch == charToEat) {\n\t                nextChar();\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\n\t        double parse() {\n\t            nextChar();\n\t            double x = parseExpression();\n\t            if (pos < str.length()) throw new RuntimeException(\"Unexpected: \" + (char)ch);\n\t            return x;\n\t        }\n\n\t        // Grammar:\n\t        // expression = term | expression `+` term | expression `-` term\n\t        // term = factor | term `*` factor | term `/` factor\n\t        // factor = `+` factor | `-` factor | `(` expression `)`\n\t        //        | number | functionName factor | factor `^` factor\n\n\t        double parseExpression() {\n\t            double x = parseTerm();\n\t            for (;;) {\n\t                if      (eat('+')) x += parseTerm(); // addition\n\t                else if (eat('-')) x -= parseTerm(); // subtraction\n\t                else return x;\n\t            }\n\t        }\n\n\t        double parseTerm() {\n\t            double x = parseFactor();\n\t            for (;;) {\n\t                if      (eat('*')) x *= parseFactor(); // multiplication\n\t                else if (eat('/')) x /= parseFactor(); // division\n\t                else return x;\n\t            }\n\t        }\n\n\t        double parseFactor() {\n\t            if (eat('+')) return parseFactor(); // unary plus\n\t            if (eat('-')) return -parseFactor(); // unary minus\n\n\t            double x;\n\t            int startPos = this.pos;\n\t            if (eat('(')) { // parentheses\n\t                x = parseExpression();\n\t                eat(')');\n\t            } else if ((ch >= '0' && ch <= '9') || ch == '.') { // numbers\n\t                while ((ch >= '0' && ch <= '9') || ch == '.') nextChar();\n\t                x = Double.parseDouble(str.substring(startPos, this.pos));\n\t            } else if (ch >= 'a' && ch <= 'z') { // functions\n\t                while (ch >= 'a' && ch <= 'z') nextChar();\n\t                String func = str.substring(startPos, this.pos);\n\t                x = parseFactor();\n\t                if (func.equals(\"sqrt\")) x = Math.sqrt(x);\n\t                else if (func.equals(\"sin\")) x = Math.sin(Math.toRadians(x));\n\t                else if (func.equals(\"cos\")) x = Math.cos(Math.toRadians(x));\n\t                else if (func.equals(\"tan\")) x = Math.tan(Math.toRadians(x));\n\t                else throw new RuntimeException(\"Unknown function: \" + func);\n\t            } else {\n\t                throw new RuntimeException(\"Unexpected: \" + (char)ch);\n\t            }\n\n\t            if (eat('^')) x = Math.pow(x, parseFactor()); // exponentiation\n\n\t            return x;\n\t        }\n\t    }.parse();\n\t}\n}",
    "stdout": "",
    "stderr": "",
    "return_code": 0
}