{
    "file": "/home/azmain/GitHub Codes/Type_Inference_with_LLM/Java_Type_Inference/snippets_for_test/all-one-shot/gwt_class_33.java",
    "java_code": "package gwt;\nimport com.google.gwt.user.client.ui.RadioButton;\nimport java.util.ArrayList;\nimport com.google.gwt.user.client.ui.DockPanel;\nimport java.util.Iterator;\nimport com.google.gwt.user.client.ui.Grid;\nimport com.google.gwt.user.client.ui.HTML;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.google.gwt.user.client.ui.HorizontalPanel;\nimport com.google.gwt.user.client.ui.VerticalPanel;\nimport com.google.gwt.user.client.ui.Button;\nimport com.google.gwt.user.client.ui.CheckBox;\nimport com.google.gwt.user.client.ui.Widget;\nimport com.google.gwt.user.client.ui.ClickListener;\nimport java.util.List;\n//ID = 2483024\n\n\n/**\n * Entry point classes define <code>onModuleLoad()</code>.\n */\n public class gwt_class_33 implements EntryPoint {\nprivate DockPanel panel;\nprivate List clearables;\n\n/**\n * This is the entry point method.\n */\npublic void onModuleLoad() {\n    clearables = new ArrayList();\n    initDockPanel();\n    panel.add(buildActionPanel(), DockPanel.SOUTH);\n    panel.add(buildPizzaTypePanel(), DockPanel.WEST);\n    panel.add(buildToppingPanel(), DockPanel.EAST);\n    RootPanel.get(\"slicr\").add(panel);\n}\nprivate void initDockPanel() {\n    panel = new DockPanel();\n    panel.setBorderWidth(1);\n    panel.setSpacing(5);\n}\npublic HorizontalPanel buildActionPanel() {\n    HorizontalPanel actions = new HorizontalPanel();\n    actions.setSpacing(10);\n    Button clear = new Button(\"Clear\");\n    clear.addClickListener(new ClearClickListener());\n    Button newPizza = new Button(\"Another Pizza\");\n    Button submitOrder = new Button(\"Submit\");\n    actions.add(clear);\n    actions.add(newPizza);\n    actions.add(submitOrder);\n    return actions;\n}\npublic static final String[] PIZZA_TYPES = new String[] {\n    \"Thin Crust Medium\", \"Thin Crust Large\", \n    \"Thin Crust X-Large\", \"Thick Crust Medium\", \n    \"Thick Crust Large\"\n};\n\nprivate VerticalPanel buildPizzaTypePanel() {\n    VerticalPanel pizzaTypes = new VerticalPanel();\n    HTML label = new HTML(\"<h2>Pizza</h2>\");\n    pizzaTypes.add(label);\n    for (int i = 0; i < PIZZA_TYPES.length; i++) {\n        RadioButton radio = new RadioButton(\"pizzaGroup\", \n            PIZZA_TYPES[i]);\n        clearables.add(radio);\n        pizzaTypes.add(radio);\n    }\n    return pizzaTypes;\n}\npublic static final String[] TOPPINGS = new String[] {\n    \"Anchovy\", \"Gardineria\", \"Garlic\", \n    \"Green Pepper\", \"Mushrooms\", \"Olives\", \n    \"Onions\", \"Pepperoni\", \"Pineapple\", \n    \"Sausage\", \"Spinach\"\n};\n\nprivate VerticalPanel buildToppingPanel() {\n    VerticalPanel toppings = new VerticalPanel();\n    toppings.add(new HTML(\"<h2>Toppings</h2>\"));\n    Grid topGrid = new Grid(TOPPINGS.length + 1, 3);\n    topGrid.setText(0, 0, \"Topping\");\n    topGrid.setText(0, 1, \"Left\");\n    topGrid.setText(0, 2, \"Right\");\n    for (int i = 0; i < TOPPINGS.length; i++) {\n        Button button = new Button(TOPPINGS[i]);\n        CheckBox leftCheckBox = new CheckBox();\n        CheckBox rightCheckBox = new CheckBox();\n        clearables.add(leftCheckBox);\n        clearables.add(rightCheckBox);\n        button.addClickListener(new ToppingButtonListener(\n                leftCheckBox, rightCheckBox));\n        topGrid.setWidget(i + 1, 0, button);    \n        topGrid.setWidget(i + 1, 1, leftCheckBox);\n        topGrid.setWidget(i + 1, 2, rightCheckBox);\n    }\n    toppings.add(topGrid);\n    return toppings;\n}\nprivate class ClearClickListener implements ClickListener {\n    public void onClick(Widget sender) {\n    for (Iterator iter = clearables.iterator(); iter.hasNext();) {\n            CheckBox cb = (CheckBox) iter.next();\n            cb.setChecked(false);\n        }\n    }\n}\nprivate class ToppingButtonListener implements ClickListener {\n\n    private CheckBox cb1;\n    private CheckBox cb2;\n\n    public ToppingButtonListener(CheckBox cb1, CheckBox cb2) {\n        this.cb1 = cb1;\n        this.cb2 = cb2;\n    }\n\n    public void onClick(Widget sender) {\n        boolean unchecked = !cb1.isChecked() && !cb2.isChecked();\n        cb1.setChecked(unchecked);\n        cb2.setChecked(unchecked);\n    }\n}\n }",
    "stdout": "",
    "stderr": "/home/azmain/GitHub Codes/Type_Inference_with_LLM/Java_Type_Inference/snippets_for_test/all-one-shot/gwt_class_33.java:22: error: cannot find symbol\n public class gwt_class_33 implements EntryPoint {\n                                      ^\n  symbol: class EntryPoint\nNote: Some input files use or override a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: /home/azmain/GitHub Codes/Type_Inference_with_LLM/Java_Type_Inference/snippets_for_test/all-one-shot/gwt_class_33.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n",
    "return_code": 1
}