{
    "file": "/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java",
    "java_code": "public class hibernate_class_15 {\n    private Long id;\n    private Date creationTimeStamp;\n    private String name;\n    private String type;\n    private String description;\n    private Long length;\n    private byte[] content;\n\n\n    /** Don't invoke this. Used by Hibernate only. */\n    public void setContentBlob(Blob imageBlob) {\n     this.content = this.toByteArray(imageBlob);\n    }\n\n    /** Don't invoke this. Used by Hibernate only. */\n    public Blob getContentBlob() {\n     return Hibernate.createBlob(this.content);\n    }\n\n    private byte[] toByteArray(Blob fromBlob) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n         return toByteArrayImpl(fromBlob, baos);\n        } catch (SQLException e) {\n         throw new RuntimeException(e);\n        } catch (IOException e) {\n         throw new RuntimeException(e);\n        } finally {\n         if (baos != null) {\n          try {\n           baos.close();\n          } catch (IOException ex) {\n          }\n         }\n        }\n       }\n\n    private byte[] toByteArrayImpl(Blob fromBlob, ByteArrayOutputStream baos)\n    throws SQLException, IOException {\n    byte[] buf = new byte[4000];\n    InputStream is = fromBlob.getBinaryStream();\n    try {\n     for (;;) {\n      int dataSize = is.read(buf);\n\n      if (dataSize == -1)\n       break;\n      baos.write(buf, 0, dataSize);\n     }\n    } finally {\n     if (is != null) {\n      try {\n       is.close();\n      } catch (IOException ex) {\n      }\n     }\n    }\n    return baos.toByteArray();\n   }\n\n    /**\n     * @return Returns the creationTimeStamp.\n     */\n    public Date getCreationTimeStamp() {\n        return creationTimeStamp;\n    }\n    /**\n     * @param creationTimeStamp\n     *            The creationTimeStamp to set.\n     */\n    public void setCreationTimeStamp(Date creationTimeStamp) {\n        this.creationTimeStamp = creationTimeStamp;\n    }\n    /**\n     * @return Returns the description.\n     */\n    public String getDescription() {\n        return description;\n    }\n    /**\n     * @param description\n     *            The description to set.\n     */\n    public void setDescription(String description) {\n        this.description = description;\n    }\n    /**\n     * @return Returns the id.\n     */\n    public Long getId() {\n        return id;\n    }\n    /**\n     * @param id\n     *            The id to set.\n     */\n    public void setId(Long id) {\n        this.id = id;\n    }\n    /**\n     * @return Returns the length.\n     */\n    public Long getLength() {\n        return length;\n    }\n    /**\n     * @param length\n     *            The length to set.\n     */\n    public void setLength(Long length) {\n        this.length = length;\n    }\n    /**\n     * @return Returns the name.\n     */\n    public String getName() {\n        return name;\n    }\n    /**\n     * @param name\n     *            The name to set.\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n    /**\n     * @return Returns the type.\n     */\n    public String getType() {\n        return type;\n    }\n    /**\n     * @param type\n     *            The type to set.\n     */\n    public void setType(String type) {\n        this.type = type;\n    }\n    /**\n     * @return Returns the content.\n     */\n    public byte[] getContent() {\n        return content;\n    }\n\n    /**\n     * @param content\n     *            The content to set.\n     */\n    public void setContent(byte[] content) {\n        this.content = content;\n    }\n}",
    "stdout": "",
    "stderr": "/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:3: error: cannot find symbol\n    private Date creationTimeStamp;\n            ^\n  symbol:   class Date\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:12: error: cannot find symbol\n    public void setContentBlob(Blob imageBlob) {\n                               ^\n  symbol:   class Blob\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:17: error: cannot find symbol\n    public Blob getContentBlob() {\n           ^\n  symbol:   class Blob\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:21: error: cannot find symbol\n    private byte[] toByteArray(Blob fromBlob) {\n                               ^\n  symbol:   class Blob\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:39: error: cannot find symbol\n    private byte[] toByteArrayImpl(Blob fromBlob, ByteArrayOutputStream baos)\n                                   ^\n  symbol:   class Blob\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:39: error: cannot find symbol\n    private byte[] toByteArrayImpl(Blob fromBlob, ByteArrayOutputStream baos)\n                                                  ^\n  symbol:   class ByteArrayOutputStream\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:40: error: cannot find symbol\n    throws SQLException, IOException {\n           ^\n  symbol:   class SQLException\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:40: error: cannot find symbol\n    throws SQLException, IOException {\n                         ^\n  symbol:   class IOException\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:65: error: cannot find symbol\n    public Date getCreationTimeStamp() {\n           ^\n  symbol:   class Date\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:72: error: cannot find symbol\n    public void setCreationTimeStamp(Date creationTimeStamp) {\n                                     ^\n  symbol:   class Date\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:18: error: cannot find symbol\n     return Hibernate.createBlob(this.content);\n            ^\n  symbol:   variable Hibernate\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:22: error: cannot find symbol\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ^\n  symbol:   class ByteArrayOutputStream\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:22: error: cannot find symbol\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                                         ^\n  symbol:   class ByteArrayOutputStream\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:25: error: cannot find symbol\n        } catch (SQLException e) {\n                 ^\n  symbol:   class SQLException\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:27: error: cannot find symbol\n        } catch (IOException e) {\n                 ^\n  symbol:   class IOException\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:33: error: cannot find symbol\n          } catch (IOException ex) {\n                   ^\n  symbol:   class IOException\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:42: error: cannot find symbol\n    InputStream is = fromBlob.getBinaryStream();\n    ^\n  symbol:   class InputStream\n  location: class hibernate_class_15\n/home/azmain/GitHub Codes/so_dataset/hibernate_class_15.java:55: error: cannot find symbol\n      } catch (IOException ex) {\n               ^\n  symbol:   class IOException\n  location: class hibernate_class_15\n18 errors\n",
    "return_code": 1
}