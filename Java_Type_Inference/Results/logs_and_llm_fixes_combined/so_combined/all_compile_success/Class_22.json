{
    "attempt": 2,
    "file": "/home/azmain/GitHub Codes/Type_Inference_with_LLM/Java_Type_Inference/Results/llm_fixes/fixed_codes/so-fix/Class_22.java",
    "java_code": "import javax.swing.JFrame;\nimport javax.swing.JProgressBar;\nimport javax.swing.JLabel;\nimport java.awt.Container;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeEvent;\nimport java.text.DecimalFormat;\nimport java.awt.GridLayout;\nimport javax.swing.SwingWorker;\nimport java.awt.EventQueue;\n\npublic class Class_22 {\n    /** @see http://stackoverflow.com/questions/4637215 */\n    public class TwoRoot extends JFrame {\n\n        private static final String s = \"0.000000000000000\";\n        private JProgressBar progressBar = new JProgressBar(0, 100);\n        private JLabel label = new JLabel(s, JLabel.CENTER);\n\n        public TwoRoot() {\n            this.setLayout(new GridLayout(0, 1));\n            this.setTitle(\"???2\");\n            this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            this.add(progressBar);\n            this.add(label);\n            this.setSize(161, 100);\n            this.setLocationRelativeTo(null);\n            this.setVisible(true);\n        }\n\n        public void runCalc() {\n            progressBar.setIndeterminate(true);\n            TwoWorker task = new TwoWorker();\n            task.addPropertyChangeListener(new PropertyChangeListener() {\n\n                @Override\n                public void propertyChange(PropertyChangeEvent e) {\n                    if (\"progress\".equals(e.getPropertyName())) {\n                        progressBar.setIndeterminate(false);\n                        progressBar.setValue((Integer) e.getNewValue());\n                    }\n                }\n            });\n            task.execute();\n        }\n\n        private class TwoWorker extends SwingWorker<Double, Double> {\n\n            private static final int N = 5;\n            private final DecimalFormat df = new DecimalFormat(s);\n            double x = 1;\n\n            @Override\n            protected Double doInBackground() throws Exception {\n                for (int i = 1; i <= N; i++) {\n                    x = x - (((x * x - 2) / (2 * x)));\n                    setProgress(i * (100 / N));\n                    publish(Double.valueOf(x));\n                    Thread.sleep(1000); // simulate latency\n                }\n                return Double.valueOf(x);\n            }\n\n            @Override\n            protected void process(List<Double> chunks) {\n                for (double d : chunks) {\n                    label.setText(df.format(d));\n                }\n            }\n        }\n\n        public void main(String[] args) {\n            EventQueue.invokeLater(new Runnable() {\n\n                @Override\n                public void run() {\n                    TwoRoot t = new TwoRoot();\n                    t.runCalc();\n                }\n            });\n        }\n    }\n}",
    "stdout": "",
    "stderr": "",
    "return_code": 0
}