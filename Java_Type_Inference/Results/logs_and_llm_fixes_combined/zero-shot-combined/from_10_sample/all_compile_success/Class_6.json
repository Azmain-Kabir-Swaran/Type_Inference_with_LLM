{
    "file": "/home/azmain/GitHub Codes/Type_Inference_with_LLM/Java_Type_Inference/snippets_for_test/all-zero-shot/Class_6.java",
    "java_code": "package common_JDK;\nimport java.util.Random;\nimport javax.swing.JFrame;\nimport java.util.Observable;\nimport java.awt.event.ActionEvent;\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport javax.swing.JLabel;\nimport java.util.Observer;\nimport java.awt.event.ActionListener;\nimport javax.swing.JPanel;\nimport javax.swing.JButton;\nimport java.awt.Graphics2D;\nimport java.awt.RenderingHints;\nimport java.awt.EventQueue;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport javax.swing.Icon;\n/*\n Date: 1/19/17\n URL: http://stackoverflow.com/questions/3066590/gui-not-working-after-rewriting-to-mvc\n */\n\n/**\n * @see http://stackoverflow.com/q/3066590/230513\n * 15-Mar-2011 r8 http://stackoverflow.com/questions/5274962\n * 26-Mar-2013 r17 per comment\n */\npublic class Class_6 implements Runnable {\n\n    public static void main(String[] args) {\n        EventQueue.invokeLater(new Class_6());\n    }\n\n    @Override\n    public void run() {\n        JFrame f = new JFrame();\n        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        f.add(new MainPanel());\n        f.pack();\n        f.setLocationRelativeTo(null);\n        f.setVisible(true);\n    }\n}\n\nclass MainPanel extends JPanel {\n\n    public MainPanel() {\n        super(new BorderLayout());\n        Model model = new Model();\n        View view = new View(model);\n        Control control = new Control(model, view);\n        JLabel label = new JLabel(\"Guess what color!\", JLabel.CENTER);\n        this.add(label, BorderLayout.NORTH);\n        this.add(view, BorderLayout.CENTER);\n        this.add(control, BorderLayout.SOUTH);\n    }\n}\n\n/**\n * Control panel\n */\nclass Control extends JPanel {\n\n    private Model model;\n    private View view;\n    private JButton reset = new JButton(\"Reset\");\n\n    public Control(Model model, View view) {\n        this.model = model;\n        this.view = view;\n        this.add(reset);\n        reset.addActionListener(new ButtonHandler());\n    }\n\n    private class ButtonHandler implements ActionListener {\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            String cmd = e.getActionCommand();\n            if (\"Reset\".equals(cmd)) {\n                model.reset();\n            }\n        }\n    }\n}\n\n/**\n * View\n */\nclass View extends JPanel {\n\n    private static final String s = \"Click a button.\";\n    private Model model;\n    private ColorIcon icon = new ColorIcon(80, Color.gray);\n    private JLabel label = new JLabel(s, icon, JLabel.CENTER);\n\n    public View(Model model) {\n        super(new BorderLayout());\n        this.model = model;\n        label.setVerticalTextPosition(JLabel.BOTTOM);\n        label.setHorizontalTextPosition(JLabel.CENTER);\n        this.add(label, BorderLayout.CENTER);\n        this.add(genButtonPanel(), BorderLayout.SOUTH);\n        model.addObserver(new ModelObserver());\n    }\n\n    private JPanel genButtonPanel() {\n        JPanel panel = new JPanel();\n        for (Piece p : Piece.values()) {\n            PieceButton pb = new PieceButton(p);\n            pb.addActionListener(new ButtonHandler());\n            panel.add(pb);\n        }\n        return panel;\n    }\n\n    private class ModelObserver implements Observer {\n\n        @Override\n        public void update(Observable o, Object arg) {\n            if (arg == null) {\n                label.setText(s);\n                icon.color = Color.gray;\n            } else {\n                if ((Boolean) arg) {\n                    label.setText(\"Win!\");\n                } else {\n                    label.setText(\"Keep trying.\");\n                }\n            }\n        }\n    }\n\n    private class ButtonHandler implements ActionListener {\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            PieceButton pb = (PieceButton) e.getSource();\n            icon.color = pb.piece.color;\n            label.repaint();\n            model.check(pb.piece);\n        }\n    }\n\n    private static class PieceButton extends JButton {\n\n        Piece piece;\n\n        public PieceButton(Piece piece) {\n            this.piece = piece;\n            this.setIcon(new ColorIcon(16, piece.color));\n        }\n    }\n\n    private static class ColorIcon implements Icon {\n\n        private int size;\n        private Color color;\n\n        public ColorIcon(int size, Color color) {\n            this.size = size;\n            this.color = color;\n        }\n\n        @Override\n        public void paintIcon(Component c, Graphics g, int x, int y) {\n            Graphics2D g2d = (Graphics2D) g;\n            g2d.setRenderingHint(\n                RenderingHints.KEY_ANTIALIASING,\n                RenderingHints.VALUE_ANTIALIAS_ON);\n            g2d.setColor(color);\n            g2d.fillOval(x, y, size, size);\n        }\n\n        @Override\n        public int getIconWidth() {\n            return size;\n        }\n\n        @Override\n        public int getIconHeight() {\n            return size;\n        }\n    }\n}\n\n/**\n * Model\n */\nclass Model extends Observable {\n\n    private static final Random rnd = new Random();\n    private static final Piece[] pieces = Piece.values();\n    private Piece hidden = init();\n\n    private Piece init() {\n        return pieces[rnd.nextInt(pieces.length)];\n    }\n\n    public void reset() {\n        hidden = init();\n        setChanged();\n        notifyObservers();\n    }\n\n    public void check(Piece guess) {\n        setChanged();\n        notifyObservers(guess.equals(hidden));\n    }\n}\n\nenum Piece {\n\n    Red(Color.red), Green(Color.green), Blue(Color.blue);\n    public Color color;\n\n    private Piece(Color color) {\n        this.color = color;\n    }\n}",
    "stdout": "",
    "stderr": "",
    "return_code": 0
}